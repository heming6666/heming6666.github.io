<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>欢迎 on 8898 写字的地方</title><link>https://heming6666.github.io/</link><description>Recent content in 欢迎 on 8898 写字的地方</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://heming6666.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux 进程调度</title><link>https://heming6666.github.io/docs/example/table-of-contents/with-toc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/example/table-of-contents/with-toc/</guid><description>Linux 进程调度 # 前言 # 在计算机科学中，调度就是一种将任务（Work）分配给资源的方法。任务可能是虚拟的计算任务，例如线程、进程或者数据流，这些任务会被调度到硬件资源上执行，例如：处理器 CPU 等设备。调度器或调度算法的设计与实现最终都会归结到一个问题上，即如何对有限的资源进行分配以实现资源利用率的最大化并满足特定的需求。
调度器是操作系统中的重要组件，操作系统中有进程调度器（Process Scheduler）、网络调度器（Network Scheduler）和 I/O 调度器（I/O Scheduler）等组件，本文介绍的是进程调度器。
进程调度器负责给系统中的所有进程分配有限的 CPU 时间资源。只有通过合理的调度算法，系统资源才能最大限度地发挥作用，多进程才会有并发执行的效果。
进程调度算法总是追求达到以下目标：
公平：保证每个进程得到合理的 CPU 时间，避免进程的饥饿现象。 高效：尽量充分使用 CPU，使 CPU 保持忙碌状态。 快速的响应时间：使交互用户的响应时间应尽可能短。 周转时间：使批处理用户等待输出的时间尽可能短。 吞吐量：单位时间内处理的进程数量尽可能多。 但是很显然，这几个目标是相互冲突的，不可能同时达到。因此只能在这几个方面进行取舍，从而确定自己的调度算法。
进程调度器将进程分为三类：
交互式进程(Interactive process)：这些进程经常与用户进行交互，因此进程不断地处于睡眠状态，等待用户输入。典型的应用比如命令行 shell、文本编辑程序。此类进程对系统响应时间要求比较高，否则用户会感觉系统反应迟缓。
批处理进程(Batch process)：这些进程一般在后台运行，不必与用户交互，需要占用大量的系统资源。但是能够忍受响应延迟。典型的批处理程序如编译程序、数据库搜索引擎等。
实时进程(Real-time process)：这些进程对调度延迟的要求最高，往往执行非常重要的操作，要求立即响应并执行。典型的实时程序比如视频播放软件、或飞机飞行控制系统，很明显这类程序不能容忍长时间的调度延迟。
根据进程的不同分类 Linux 采用不同的调度策略。
对于实时进程，采用 FIFO 或者 Round Robin 的调度策略。
对于普通进程，则需要区分交互式和批处理式的不同。传统 Linux 调度器提高交互式应用的优先级，使得它们能更快地被调度。而 CFS 和 RSDL 等新的调度器的核心思想是“完全公平”。这个设计理念不仅大大简化了调度器的代码复杂度，还对各种调度需求的提供了更完美的支持。
以下列出了 Linux 不同版本调度器的历史：
初始调度器 · v0.</description></item><item><title>从开机 main 函数执行</title><link>https://heming6666.github.io/docs/cs/linux/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/linux/1/</guid><description>Linux 从开机到加电执行 main 函数之前的过程 # 1.1 启动 BIOS，准备中断向量表和中断服务程序 # 加电时，内存 RAM 是空的 BIOS 负责把操作系统内核程序加载到内存中 具体过程：
靠硬件完成，将 CPU 的硬件逻辑设计为加电瞬间 CS:IP 指向 0xFFFF0, 即 BIOS 程序入口地址。 BIOS 在内存中建立中断向量表和中断服务程序。利用中断，加载内核程序。 产生 int 0x19 中断，找到并加载启动扇区，从而 bootsecct 程序被拷贝到内存。 BIOS 负责找到并加载第一扇区，与具体的Linux内核无关，即两头约定 + 定位识别。</description></item><item><title>何为债</title><link>https://heming6666.github.io/docs/law/dept/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/law/dept/</guid><description>何为债 # 债，以及其他的法律概念，从事实到概念形成，规定明确要件和法律效果，核心是法律的构建。因而，学习制度的思考路径，至少应当事实与法律并重。
观察债的典型事实，其并非有共同构成要件，而是有同样的法律效果，即一方得以向另一方要求给付。此为债的基础原则。
而债，实乃最基础的公式，其具有基础的要件，但加入具体的事实因素，则构成复杂的具体法律关系。而习得公式只是第一步，不同于数学公式的引用变形，每一个法律规则的使用，都是对于具体个体事实的讨论，都有十分重要的意义。
因而，析得债实乃第一步，还应明确为何种债，并且需要进入到实际的具体概念和规则的讨论。
“一方得以向对另一方要求给付”性质 # 该性质为债的基本原则，强调双方。如有突破的，需要有法律的明确规定。
相对性 # “债权为对于特定人之权利，债权人只能向债务人请求给付，而不能向债务人以外之人请求给付”。
非支配性，没有绝对性和排他性。数个债权不论其发生先后，均以同等地位并存。（1）平等性：甲将房屋先后出卖给乙、丙、丁时买卖契约均属有效，三人均可请求甲交付该屋。（2）相对性：设甲将屋所有权移转于丁，乙、丙的债权随发生在前，仍不能向丁主张任何权利，仅得依债务不履行规定向甲请求损害赔偿。（3）非排他：债务人破产时，债权不论其发生先后，均依比例参加分配。
第三人侵害债权 # 该理论寓有一项法律政策上的价值判断，即适当维护第三人的活动自由。
例如，A驾车不慎，撞伤将在B歌厅作个人秀的歌星C。（1）A侵害了C的人身权，对其负是损害赔偿责任；（2）a.A的行为导致C无法演出，构成B的损失。b.C对于B的演出义务，产生于B与C之间的合同约定，该约定不可以用来规制A，B不可主张A侵害了自己能够使C来演出的权利。c.B可以依A故意以悖于善良风俗之方法，加损害于自己，来主张损害赔偿。
即，债权的规制范围仅限于债权双方，第三人即使造成债权实际损害的结果，由于其并不受债权的约束，因此不可以主张第三人侵害债权。
特殊：债权物权化 # 债权的物权化，即产生对抗一般人的法律效果，来源于法律的具体规定。
租赁权的物权化：租赁在先，即使出租人将租赁物所有权转移给第三人，无论第三人是否知道或知道应当知道该租赁合同的存在，承租人的租赁权依旧可以对抗第三人存在（“买卖不破租赁”）。 预告登记：预告登记的内容为债权，债权成立而登记后，任何处分该标的物的行为违背该预告登记的债权的，物权的变动无效。 基于约定产生的涉他关系 债的实现 # 实现的范围（债权角度） 。 债的内容即请求为给付，其目的是得到给付，如果交货付款同时完成，那么债权的存在没有那么大的意义。问题是，随着交易生活的不断变迁，债并非能够即时充分兑现。因此，债与债的实现一分为二。债的存在是为了保障债的实现，而债能够实现是债存在的基础。
以当事人自治为原则，法律不直接参与债与债的实现。 债的内容是课债务人以给付义务，并赋予债权人以请求给付的权利。法律并不主动参与到这个过程中去，因为债是相对人之间的事，债权人可以主动选择是否实现请求以得到给付的权利。法律对债权人决定行使债权的给予权威、力量和制度，使其利益得到实现。
此外，必要时法律予以强制性并于特殊情形下允许债权人自力实现其债权。
一般权能 # 请求力：债的基本要义就是债权人能够诉请债务人履行义务。 执行力：诉请债务人履行后，债务人不履行的，法院得依债务的内容对债务人强制履行。具体有金钱请求权、物之交付请求权、行为及不行为请求权、假扣押假处分执行等。 私力实现：于特殊情况下，可以正当防卫紧急避险自助行为。除此之外，由于未涉及“实力”，五海域法律秩序及社会平和，允许抵抵销。 处分：由于法律赋予债权强的可实现力，因而债权富有价值，债权人可以对其进行处分，包括转让、免除、质押。 保持力：债务人给付后，债权人得以保有该给付，不致构成不当得利。债权具有保持给付之法律上的原因，该给付包括自动与法律强制下的给付。 特殊情形 # 请求力不完全：婚约，婚姻强调意志自由，履行以后不可强制；罹于消灭时效的债权请求力减损，不可诉请执行。 强制力排除：夫妻间的同居义务；与人身相关的义务：eg绘像，可以损害赔偿但不可直接强制； 处分排除：破产人因破产之宣告，对于其财产，丧失管理及处分权；约定债权不可让与的。 自然债务 # 婚姻居间报酬：成功才具有保有力；赌债：仅具有保有力。
债务与责任 # 负担的范围（债务的角度）
一般负担 # 责任即强制实现此项义务的手段，亦即履行此项义务的担保。即债务人的一般负担是为给付以自己的全部（或是特定）财产担保债务的实现。</description></item><item><title>Linux 进程调度</title><link>https://heming6666.github.io/docs/cs/linux-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/linux-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid><description>Linux 进程调度 # 前言 # 在计算机科学中，调度就是一种将任务（Work）分配给资源的方法。任务可能是虚拟的计算任务，例如线程、进程或者数据流，这些任务会被调度到硬件资源上执行，例如：处理器 CPU 等设备。调度器或调度算法的设计与实现最终都会归结到一个问题上，即如何对有限的资源进行分配以实现资源利用率的最大化并满足特定的需求。
调度器是操作系统中的重要组件，操作系统中有进程调度器（Process Scheduler）、网络调度器（Network Scheduler）和 I/O 调度器（I/O Scheduler）等组件，本文介绍的是进程调度器。
进程调度器负责给系统中的所有进程分配有限的 CPU 时间资源。只有通过合理的调度算法，系统资源才能最大限度地发挥作用，多进程才会有并发执行的效果。
进程调度算法总是追求达到以下目标：
公平：保证每个进程得到合理的 CPU 时间，避免进程的饥饿现象。 高效：尽量充分使用 CPU，使 CPU 保持忙碌状态。 快速的响应时间：使交互用户的响应时间应尽可能短。 周转时间：使批处理用户等待输出的时间尽可能短。 吞吐量：单位时间内处理的进程数量尽可能多。 但是很显然，这几个目标是相互冲突的，不可能同时达到。因此只能在这几个方面进行取舍，从而确定自己的调度算法。
进程调度器将进程分为三类：
交互式进程(Interactive process)：这些进程经常与用户进行交互，因此进程不断地处于睡眠状态，等待用户输入。典型的应用比如命令行 shell、文本编辑程序。此类进程对系统响应时间要求比较高，否则用户会感觉系统反应迟缓。
批处理进程(Batch process)：这些进程一般在后台运行，不必与用户交互，需要占用大量的系统资源。但是能够忍受响应延迟。典型的批处理程序如编译程序、数据库搜索引擎等。
实时进程(Real-time process)：这些进程对调度延迟的要求最高，往往执行非常重要的操作，要求立即响应并执行。典型的实时程序比如视频播放软件、或飞机飞行控制系统，很明显这类程序不能容忍长时间的调度延迟。
根据进程的不同分类 Linux 采用不同的调度策略。
对于实时进程，采用 FIFO 或者 Round Robin 的调度策略。
对于普通进程，则需要区分交互式和批处理式的不同。传统 Linux 调度器提高交互式应用的优先级，使得它们能更快地被调度。而 CFS 和 RSDL 等新的调度器的核心思想是“完全公平”。这个设计理念不仅大大简化了调度器的代码复杂度，还对各种调度需求的提供了更完美的支持。
以下列出了 Linux 不同版本调度器的历史：
初始调度器 · v0.</description></item><item><title>The Clean Coder</title><link>https://heming6666.github.io/docs/cs/the-clean-coder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/the-clean-coder/</guid><description>《The Clean Coder》 阅读记录 # 术道结合，这本书不教术，更多的传道，且不仅仅适用于职业，还适用于处理其他事物。尽管是只可意会的道，依然可以通过娓娓道来的叙述与提炼，使读者联系自身经历，揣摩体悟，纳为己用。
0、关于职业素养 # 如何体现职业素养？
从自身出发，回答一个问题：在过去的工作中，遇到过哪些印象深刻的困难，最后是怎么解决的？ 问题不在于问题的难度，而在于反思的程度：怎么分析问题、查阅什么资料、采取解决问题的方式步骤、采取什么措施避免和改进。
从外部出发，是否对外展示了专业精神获得外部人员的信任？是否需要对你进行微观管理才能令人放心？
总结起来，职业素养 = 能力（技术） + 素质（价值观、原则、态度）+ 持续的积累和养成。
关于价值观，可阅读前言部分 “挑战者”号航天飞机工程师的故事。 1、专业主义 # “哦！笑吧，科延，老伙计。这是上帝，或者也可以说时命运或自然，跟我们开的一个玩笑。不过，不管这家伙是谁或是什么，他真幽默！哈哈！” —— 霍华德，《碧血金沙》 清楚你到底要的是什么？真的是成为专业人士吗？不仅仅是荣誉与骄傲，更多的是责任与义务。
担当责任，不仅如何保全自己，还有客户及他人。
不行损害之事：让 QA 找不出任何问题 + TDD 100% 覆盖率的要求 + 随时重构 + 自动化 QA 0、就像医生一样，虽然 Bug 无法避免，但是需要为出现的 Bug 负责。 1、练习道歉，道歉时必要的。 2、不能铭记过去的人，注定要重蹈覆辙。有责任让失误率无限接近零。 专业人士的职业生涯：
了解你的领域，如设计模式。过去来之不易的理念，大部分依然像过去一样富有价值。 坚持学习，与时俱进：想想你会去找已经不看医学期刊的医生看病、会聘请不了解最新税法和判例的税务律师吗？ 需要投入时间和精力去追求和练习（想想音乐家的表演和练习）。因为热爱，额外的20小时能让你免于枯竭匮乏。 合作与辅导是必要的。 了解业务领域：不可以不求甚解，能辨别与质疑。 与雇主 / 客户保持一致：站在雇主的角度思考，而开发人员之间互相认同是容易的，应当避免狭隘之见。 谦逊。 编程是及其自负的行为，专业人士知道此，因此不会故作谦逊：他们熟知自己的工作，并引以为荣；他们对自己的能力充满自信，并因此用于承担有把握的风险。专业人士不是胆小鬼。 然而，专业人士也知道自己会摔跟头，自己的风险评估也有出错的时候，自己也有力不从心的时候。这时候，如果他们照照镜子，会看到那个自负的傻瓜正对着自己笑。 因此，在发现自己成为笑柄时，专业人士会第一个发笑。他从不会嘲讽别人，自作自受时他会接受别人的嘲讽。反之，他则会一笑了之。他不会因别人犯错就对之横加贬损，因为他知道，自己就是下一个犯错的人。 专业人士都清楚自己的自负，也知道上天会注意到这种自负，并加以惩戒。如若果真遭遇挫折，最好的办法就是按照霍华德说的————一笑了之吧！ 2、说不 # “能就是能，不能就是不能。不要说‘试试看’。” ———— 尤达 奴隶没有权利说“不”。劳工或许也对说“不”有所顾虑。但是专业人士应该懂得说“不”。只有敢于说“不”，才能真正做成一些事情。 2.</description></item><item><title>Without ToC</title><link>https://heming6666.github.io/docs/example/table-of-contents/without-toc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/example/table-of-contents/without-toc/</guid><description>At me ipso nepotibus nunc celebratior genus # Tanto oblite # Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.
Quam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque.</description></item><item><title>二叉树 - 子树分解题</title><link>https://heming6666.github.io/docs/algorithm/tree/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/algorithm/tree/1/</guid><description>二叉树 - 子树分解题 # 基础 # https://leetcode-cn.com/problems/diameter-of-binary-tree/ https://leetcode-cn.com/problems/invert-binary-tree/submissions/ https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/ 构造题 # https://leetcode-cn.com/problems/maximum-binary-tree/</description></item><item><title>二叉树 - 构造题</title><link>https://heming6666.github.io/docs/algorithm/tree/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/algorithm/tree/3/</guid><description>二叉树 - 构造题 # https://leetcode-cn.com/problems/maximum-binary-tree/ https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/</description></item><item><title>二叉树 - 遍历题</title><link>https://heming6666.github.io/docs/algorithm/tree/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/algorithm/tree/2/</guid><description>二叉树 - 遍历题 # https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/ https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/</description></item><item><title>商入公司法</title><link>https://heming6666.github.io/docs/law/shang-ru-gong-si-fa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/law/shang-ru-gong-si-fa/</guid><description>“商入公司法” # 商法调整的是商事关系，商事几乎包括各种以营利为的商品交换以及与此相关的其他活动。
一般而言，商事关系具有以下特征：一是主体的平等性；二是只发生在以营利为目的而进行的商事活动过程，这是商事关系区分于其他法律关系尤其是普通民事关系的最重要的特点。营利至少包括获取利益、常业性。
商法按内容来分包括商事组织法与商事行为法。
商组织作为从事商活动的主体，关系到方方面面，法律自然要设定规范，规制其准入与存续。商组织法包括商事主体的设立、组织、管理、变更、解散、破产、清算而发生的内外关系。对外关系主要由债等民法调整，因而主要是对内关系。 商行为存在着商活动的特性，有别于一般的民事行为，因而也被特殊规定。商行为法包括票据法、证券法、保险法和海商法等商法部门。 公司法是最主要的商组织法。
公司本质 # 公司的法律性质即为最底层的法律原则。
公司概念 # 在大陆法系国家，公司仅指具有法人资格的营利性社团，从实质来看，它至少具有三个要素构成，即独立的人格、个人结合的社团、以营利为目的；在形式上它还要满足依法设立，即依据商事法律规定的条件和程序而设立公司。
人格性 # 指公司具有独立的人格，这种独立的人格使其能够区别于其成员而独立存在。
人格是权利义务的归属点，拥有人格意味着公司具有权利能力和行为能力，能够享有权利，承担义务。能够独立从事经营活动，实施法律行为，并能够依法承担民事责任。
公司人格的外征表现：名称（区分）、独立财产（承担责任，公司的财产丧失可能导致人格也消灭）、自己的组织机构（意志形成、行为执行）。
公司需要依法登记才能取得独立人格地位。因此在一定意义上可以说完全是法律的产物，是法律上的一种拟制。（1）采用二元主体的民事架构，最主要的目的在于方便公司从事各种经营活动；（2）拟制并不意味着有实体，因而公司人格具有可否认性。
社团性 # 即以社员的结合作为其成立基础，我国《公司法》采用的是企业法人，民法典表达为“营利主义”。现代公司法显示承认一人公司的存在已成为时代的潮流，我国现行公司法也已经突破了公司的社团性，规定了一人有限责任公司。
营利性 # 以营利为目的指组织公司成员各自以其出资经营某项事业并将公司所获得的利益分配给它的社员作为最终目的。
公司企业存在的目的在于追求利润最大化，表现为（1）股利的分配；（2）剩余财产的分配。
现代公司法要求公司在考虑利润最大化目标时，也要兼顾“利益相关者（stakeholder/other constituencies）”的利益，即承担一定的社会责任。
公司特征 # 制度的价值、作用，主要内容，法律立场。
即公司这种企业区别于其他商事组织，而使其成功的原因特征：集中管理、所有人的有限责任、的股权自由转让和公司的永久存在。
集中管理 # 所有权和经营权的分离，将公司交给更具备专业技术经验的经营者。但集中管理在封闭公司是不明显的。
投资者有限责任的产生：既然股东不能直接参与企业管理，又怎么能够像合伙人承担无限责任呢 所有者权益的自由转让：如果股东对公司经营不满意，他可以通过股权转让退出公司。 公司的独立主体地位：只要投资人愿意，公司可以无限期地存在。 有限责任 # 按认缴的出资额或认购的股份份额承担责任。核心是在公司和其股东划出一条明显的界限。“简单来讲，对于投资者而言其可以多项投资，更敢更省事；对于实际经营管理者而言，只有公司经营良好才不至于使股权被收购自己被替换。”
降低监控代理人的成本，投资人可以多样化投资来分散风险，也可以多样化和消极监督 降低监控其他股东的成本，合伙制情形下合伙人还要监督其他合伙人的财产状况 股份自由转让会刺激管理层进行更为有效的管理 有限责任存在股份交易的公开市场，价格能够极大的企业价值的附加信息，减少投资人花费大量资源去考察附加信息 投资者可以多样化投资，这也大大降低了企业筹资成本 促进投资者投资风险事业的投资而不至于遭受毁灭性损失 股权自由转让 # 公众公司存在为其股份转让的公开市场。
股东可以自由退出而公司资本不致减少 促使公司管理水平的提高 公开市场能够最大限度地反映财产的价值 公司的永久存在 # 实际含义是公司不会像合伙企业那样因为成员的退出而导致解散，合伙的存在依附于合伙协议。公司”永续存在“，但其控制权却可能发生了无数次的易手。</description></item><item><title/><link>https://heming6666.github.io/docs/example/collapsed/3rd-level/4th-level/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/example/collapsed/3rd-level/4th-level/</guid><description>4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.
Venasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto!</description></item><item><title/><link>https://heming6666.github.io/docs/example/hidden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/example/hidden/</guid><description>This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.
Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem.</description></item><item><title/><link>https://heming6666.github.io/docs/other/%E6%9E%97%E6%AF%85%E5%A4%AB%E8%A7%A3%E8%AF%BB%E4%B8%AD%E5%9B%BD%E7%BB%8F%E6%B5%8E%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/other/%E6%9E%97%E6%AF%85%E5%A4%AB%E8%A7%A3%E8%AF%BB%E4%B8%AD%E5%9B%BD%E7%BB%8F%E6%B5%8E%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid><description>林毅夫《解读中国经济》读书笔记 # 粗浅读之，即便对于传统的经济学理论没有甚至初级的了解，从零开始，也通过林老师的介绍，收获颇多。简单归纳，以求在知识图谱中扎上这么一段清晰而博大的中国经济知识。
我将从《解读中国经济》得到的知识分为三类。一是有关中国经济的过去、现在和未来；二是新结构经济学是什么；三是新结构经济学理论将是什么。
中国经济的过去、现在和未来 # 中国经济的过去、现在和未来是极具代表性的发展中国家的过去、现在和可能的未来。
过去，中国经济带着和其他发展中经济体的共同共性，寻求可以逐渐发展和现代化的方法。几乎全部的发展中国家一开始选择的是追赶和超过发达国家，一切资源都集中在资本集中型和技术集中型，由政府统一调配。此项政策施行之后，经济发展缓慢，虽然现代化进程有所前进，但是GDP却没有很大的增长。
经济危机频发后，发达国家主张新自由主义，即鼓吹政府退出干涉，由市场自由调节。于是，又几乎所有的发展中国家直接摒弃之前的政府调配政策，这样的后果是经济危机加剧而发展更加缓慢。 反倒是中国，采用政府调配与市场竞争并行，既有有为政府又有有为市场，反倒是这个开始被大家公认为“两不像”的政策取得了最后的胜利。
新结构经济学是什么 # 循着这条历史路径，林老师向我们揭开了新结构经济学的序幕。
新结构经济学，即研究结构的经济学，采用亚当斯密的“原因、本质”的研究方法，探究构成结构的原因与本质，由此构建适合各个国家自己的经济理论。
新结构经济学的出发点是要素禀赋，由要素禀赋到比较优势，由比较优势决定了产业，以上均围绕最低要素生产成本，并辅之以合适的硬的基础设施和软的制度安排。
要素禀赋，要素只主要以生产要素为主的一个国家的要素，禀赋指决策者在做决策时考虑的全部东西。决定一个国家发展的因素有很多，但起决定性因素的是要素禀赋，要素禀赋可以简单理解成当一个国家发展经济时，其能够依靠的好与不好的物质因素。
比较优势，典型的即发展中国家对比发达国家，其特点就是劳动力资源充足，而资本及技术资源劣后，因此，发展中国家的核心优势即是劳动密集型产业。同时，通过从发达国家进口技术与资本，发展中国家能够利用极少的风险和成本，获得产业升级等。而发达国家要进行技术与资本的革新，需要承担极高的成本风险。
产业，建立于要素禀赋之下。在发展中国家可以分为两类，一类是劳动密集型产业，劳动力成本廉价，会引得市场争相投入，商人有足够的动力，只需要考虑与经济发展方向适合的引导；一类是技术、资本密集型产业，发展国家在该种产业中劣后，动力不足，一旦离开政府的补贴扶持，很容易倾覆，而这一类产业通常是与民生相关的基础产业。
深入要素禀赋，即是要建立符合各国家自己产业结构的经济发展政策，将各国不同的结构要素考虑在内，而不同于发达国家略去此类因素的二维经济学，是适应各国家的三维经济学。
新结构经济学将是什么 # 在此基础上，深入对重要结构要素的具体探究，并以中国现在的经济政策作为例子，进一步构建宏观新结构经济理论。
“这是一个需要理论而且一定能够产生理论的时代，这是一个需要思想而且一定能够产生思想的时代。我们不能辜负了这个时代。”
经济理论的发展中心往往是世界经济中心，因为经济理论的发展需要素材，而今，发达国家缺的是素材，因为它们的经济已经趋向稳定，大多只是脚注性的研究，而中国经济学家有最新的素材。这是时代赋予我们的使命。</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/buttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/buttons/</guid><description>Buttons # Buttons are styled links that can lead to local page or external link.
Example # {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}} Get Home Contribute</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/columns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/columns/</guid><description>Columns # Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis!</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/details/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/details/</guid><description>Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.
Example # {{&amp;lt; details &amp;#34;Title&amp;#34; [open] &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} {{&amp;lt; details title=&amp;#34;Title&amp;#34; open=true &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} Title Markdown content # Lorem markdownum insigne&amp;hellip;</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/expand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/expand/</guid><description>Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example # Default # {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Expand ↕ Markdown content # Lorem markdownum insigne&amp;hellip; With Custom Label # {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne.</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/hints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/hints/</guid><description>Hints # Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example # Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/katex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/katex/</guid><description>KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX
Example # {{&amp;lt; katex [display] [class=&amp;#34;text-center&amp;#34;] &amp;gt;}} f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi {{&amp;lt; /katex &amp;gt;}} Display Mode Example # Here is some inline example: \(\pi(x)\) , rendered in the same line. And below is display example, having display: block \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Text continues here.</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/mermaid/</guid><description>Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.
Override Mermaid Initialization Config
To override the initialization config for Mermaid, create a mermaid.json file in your assets folder!
Example # {{&amp;lt; mermaid [class=&amp;#34;text-center&amp;#34;]&amp;gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --&amp;gt; State2 note left of State2 : This is the note to the left.</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/section/first-page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/section/first-page/</guid><description>First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/section/second-page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/section/second-page/</guid><description>Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/tabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/tabs/</guid><description>Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example # MacOS MacOS # This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis!</description></item></channel></rss>