<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>欢迎 on 8898 写字的地方</title><link>https://heming6666.github.io/</link><description>Recent content in 欢迎 on 8898 写字的地方</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://heming6666.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux 进程调度</title><link>https://heming6666.github.io/docs/example/table-of-contents/with-toc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/example/table-of-contents/with-toc/</guid><description>Linux 进程调度 # 前言 # 在计算机科学中，调度就是一种将任务（Work）分配给资源的方法。任务可能是虚拟的计算任务，例如线程、进程或者数据流，这些任务会被调度到硬件资源上执行，例如：处理器 CPU 等设备。调度器或调度算法的设计与实现最终都会归结到一个问题上，即如何对有限的资源进行分配以实现资源利用率的最大化并满足特定的需求。
调度器是操作系统中的重要组件，操作系统中有进程调度器（Process Scheduler）、网络调度器（Network Scheduler）和 I/O 调度器（I/O Scheduler）等组件，本文介绍的是进程调度器。
进程调度器负责给系统中的所有进程分配有限的 CPU 时间资源。只有通过合理的调度算法，系统资源才能最大限度地发挥作用，多进程才会有并发执行的效果。
进程调度算法总是追求达到以下目标：
公平：保证每个进程得到合理的 CPU 时间，避免进程的饥饿现象。 高效：尽量充分使用 CPU，使 CPU 保持忙碌状态。 快速的响应时间：使交互用户的响应时间应尽可能短。 周转时间：使批处理用户等待输出的时间尽可能短。 吞吐量：单位时间内处理的进程数量尽可能多。 但是很显然，这几个目标是相互冲突的，不可能同时达到。因此只能在这几个方面进行取舍，从而确定自己的调度算法。
进程调度器将进程分为三类：
交互式进程(Interactive process)：这些进程经常与用户进行交互，因此进程不断地处于睡眠状态，等待用户输入。典型的应用比如命令行 shell、文本编辑程序。此类进程对系统响应时间要求比较高，否则用户会感觉系统反应迟缓。
批处理进程(Batch process)：这些进程一般在后台运行，不必与用户交互，需要占用大量的系统资源。但是能够忍受响应延迟。典型的批处理程序如编译程序、数据库搜索引擎等。
实时进程(Real-time process)：这些进程对调度延迟的要求最高，往往执行非常重要的操作，要求立即响应并执行。典型的实时程序比如视频播放软件、或飞机飞行控制系统，很明显这类程序不能容忍长时间的调度延迟。
根据进程的不同分类 Linux 采用不同的调度策略。
对于实时进程，采用 FIFO 或者 Round Robin 的调度策略。
对于普通进程，则需要区分交互式和批处理式的不同。传统 Linux 调度器提高交互式应用的优先级，使得它们能更快地被调度。而 CFS 和 RSDL 等新的调度器的核心思想是“完全公平”。这个设计理念不仅大大简化了调度器的代码复杂度，还对各种调度需求的提供了更完美的支持。
以下列出了 Linux 不同版本调度器的历史：
初始调度器 · v0.</description></item><item><title>二分查找</title><link>https://heming6666.github.io/docs/algorithm/search/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/algorithm/search/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid><description>二分查找 # 1、有序数组，查找一个数搜索一个数，如果存在，返回其索引，否则返回 -1。 # int binarySearch(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { int left = 0; int right = nums.size() - 1; // 注意 while(left &amp;lt;= right) { int mid = left + (right - left) / 2; if (nums[mid] &amp;lt; target) left = mid + 1; // 注意 else if (nums[mid] &amp;gt; target) right = mid - 1; // 注意 else if(nums[mid] == target) return mid; } return -1; } 1、为什么 while 循环的条件中是 &amp;lt;=，而不是 &amp;lt;？ # 答：因为初始化right的赋值是nums.</description></item><item><title>从开机 main 函数执行</title><link>https://heming6666.github.io/docs/cs/linux-kernel/%E4%BB%8E%E5%BC%80%E6%9C%BA%E5%88%B0main%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/linux-kernel/%E4%BB%8E%E5%BC%80%E6%9C%BA%E5%88%B0main%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C/</guid><description>Linux 从开机到加电执行 main 函数之前的过程 # mermaid.initialize({ "flowchart": { "useMaxWidth":true }, "theme": "default" } ) flowchart LR bootsect[执行 bootsect]-- setup[执行 setup]-- head[执行 head.s]-- main[main 函数] 1.1 启动 BIOS，准备中断向量表和中断服务程序 # 加电时，内存 RAM 是空的 BIOS 负责把操作系统内核程序加载到内存中 具体过程：
靠硬件完成，将 CPU 的硬件逻辑设计为加电瞬间 CS:IP 指向 0xFFFF0, 即 BIOS 程序入口地址。 BIOS 在内存中建立中断向量表和中断服务程序。利用中断，才能加载内核程序。 1.2 加载内核程序 # 产生 int 0x19 中断，找到并加载启动扇区，从而 bootsecct 程序被拷贝到内存。 BIOS 负责找到并加载第一扇区，与具体的Linux内核无关，即两头约定 + 定位识别。 bootsecct 程序复制自身到另一个地方，并调整CS:IP、DS(数据段寄存器)、ES(附加段寄存器)、SS(栈基址寄存器)+SP(栈顶指针).</description></item><item><title>何为债</title><link>https://heming6666.github.io/docs/law/system/%E4%BD%95%E4%B8%BA%E5%80%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/law/system/%E4%BD%95%E4%B8%BA%E5%80%BA/</guid><description>何为债 # 债，以及其他的法律概念，从事实到概念形成，规定明确要件和法律效果，核心是法律的构建。因而，学习制度的思考路径，至少应当事实与法律并重。
观察债的典型事实，其并非有共同构成要件，而是有同样的法律效果，即一方得以向另一方要求给付。此为债的基础原则。
而债，实乃最基础的公式，其具有基础的要件，但加入具体的事实因素，则构成复杂的具体法律关系。而习得公式只是第一步，不同于数学公式的引用变形，每一个法律规则的使用，都是对于具体个体事实的讨论，都有十分重要的意义。
因而，析得债实乃第一步，还应明确为何种债，并且需要进入到实际的具体概念和规则的讨论。
“一方得以向对另一方要求给付”性质 # 该性质为债的基本原则，强调双方。如有突破的，需要有法律的明确规定。
相对性 # “债权为对于特定人之权利，债权人只能向债务人请求给付，而不能向债务人以外之人请求给付”。
非支配性，没有绝对性和排他性。数个债权不论其发生先后，均以同等地位并存。（1）平等性：甲将房屋先后出卖给乙、丙、丁时买卖契约均属有效，三人均可请求甲交付该屋。（2）相对性：设甲将屋所有权移转于丁，乙、丙的债权随发生在前，仍不能向丁主张任何权利，仅得依债务不履行规定向甲请求损害赔偿。（3）非排他：债务人破产时，债权不论其发生先后，均依比例参加分配。
第三人侵害债权 # 该理论寓有一项法律政策上的价值判断，即适当维护第三人的活动自由。
例如，A驾车不慎，撞伤将在B歌厅作个人秀的歌星C。（1）A侵害了C的人身权，对其负是损害赔偿责任；（2）a.A的行为导致C无法演出，构成B的损失。b.C对于B的演出义务，产生于B与C之间的合同约定，该约定不可以用来规制A，B不可主张A侵害了自己能够使C来演出的权利。c.B可以依A故意以悖于善良风俗之方法，加损害于自己，来主张损害赔偿。
即，债权的规制范围仅限于债权双方，第三人即使造成债权实际损害的结果，由于其并不受债权的约束，因此不可以主张第三人侵害债权。
特殊：债权物权化 # 债权的物权化，即产生对抗一般人的法律效果，来源于法律的具体规定。
租赁权的物权化：租赁在先，即使出租人将租赁物所有权转移给第三人，无论第三人是否知道或知道应当知道该租赁合同的存在，承租人的租赁权依旧可以对抗第三人存在（“买卖不破租赁”）。 预告登记：预告登记的内容为债权，债权成立而登记后，任何处分该标的物的行为违背该预告登记的债权的，物权的变动无效。 基于约定产生的涉他关系 债的实现 # 实现的范围（债权角度） 。 债的内容即请求为给付，其目的是得到给付，如果交货付款同时完成，那么债权的存在没有那么大的意义。问题是，随着交易生活的不断变迁，债并非能够即时充分兑现。因此，债与债的实现一分为二。债的存在是为了保障债的实现，而债能够实现是债存在的基础。
以当事人自治为原则，法律不直接参与债与债的实现。 债的内容是课债务人以给付义务，并赋予债权人以请求给付的权利。法律并不主动参与到这个过程中去，因为债是相对人之间的事，债权人可以主动选择是否实现请求以得到给付的权利。法律对债权人决定行使债权的给予权威、力量和制度，使其利益得到实现。
此外，必要时法律予以强制性并于特殊情形下允许债权人自力实现其债权。
一般权能 # 请求力：债的基本要义就是债权人能够诉请债务人履行义务。 执行力：诉请债务人履行后，债务人不履行的，法院得依债务的内容对债务人强制履行。具体有金钱请求权、物之交付请求权、行为及不行为请求权、假扣押假处分执行等。 私力实现：于特殊情况下，可以正当防卫紧急避险自助行为。除此之外，由于未涉及“实力”，五海域法律秩序及社会平和，允许抵抵销。 处分：由于法律赋予债权强的可实现力，因而债权富有价值，债权人可以对其进行处分，包括转让、免除、质押。 保持力：债务人给付后，债权人得以保有该给付，不致构成不当得利。债权具有保持给付之法律上的原因，该给付包括自动与法律强制下的给付。 特殊情形 # 请求力不完全：婚约，婚姻强调意志自由，履行以后不可强制；罹于消灭时效的债权请求力减损，不可诉请执行。 强制力排除：夫妻间的同居义务；与人身相关的义务：eg绘像，可以损害赔偿但不可直接强制； 处分排除：破产人因破产之宣告，对于其财产，丧失管理及处分权；约定债权不可让与的。 自然债务 # 婚姻居间报酬：成功才具有保有力；赌债：仅具有保有力。
债务与责任 # 负担的范围（债务的角度）
一般负担 # 责任即强制实现此项义务的手段，亦即履行此项义务的担保。即债务人的一般负担是为给付以自己的全部（或是特定）财产担保债务的实现。</description></item><item><title>跨境并购交易方案设计实操案例解析</title><link>https://heming6666.github.io/docs/law/practice/%E8%B7%A8%E5%A2%83%E5%B9%B6%E8%B4%AD%E4%BA%A4%E6%98%93%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1%E5%AE%9E%E6%93%8D%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/law/practice/%E8%B7%A8%E5%A2%83%E5%B9%B6%E8%B4%AD%E4%BA%A4%E6%98%93%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1%E5%AE%9E%E6%93%8D%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/</guid><description>跨境并购交易方案设计实操案例解析 # 客户是一家设立于香港的生物制药香港上市公司“并购方”，拟收购一家位于大陆的基因制药企业“目标公司”。 目标公司于2010年设立，注册资本为人民币1亿元，已全部缴齐 财务状况方面，目标公司连年亏损，净资产为负，尚欠银行逾期贷款人民币5000万元。 股权结构方面：目标公司现有3名股东，其中股东甲是一名境内自然人，持股51%，股权乙是当地政府出自平台，持股25%，股东丙是一家境内投资基金，持股24%。 并购方拟以人民币2.2亿并购目标公司。 维度思考 # 股权并购、资产并购
主体：境内子公司
标的：有形、无形资产；人员；债权债务关系
程序：清算、评估、转让（完全私人交易主要是双方的磋商）
要点：资质、限制（主要是银行方面）、税费、时间
绕掉壳的不合规性，做到一样的效果。
特殊行业：制药企业，无法适用资产并购
股权并购 # 类型：转让；增资（常用方式）；VIE架构（协议控制）
VIE的主要考量外商投资指导目录：第三类禁止类：涉及到基因等不可以适用股权投，只能协议控制。
五个协议：独家购买权法律允许的情况下可以1块钱直接行使购买权、独家业务合作协议：转移利润；股权质押协议：全转让有风险；股东表决权委托协议：控制股 东会；配偶承诺函：婚姻纠纷；阿里土豆等。
转让与增资：取得控制地位，1.02亿或500万；
资金流向：转让时使用资金成本较低；资金额的作用。
增资没有任何一方形成所得：无税收
最优方案的重点注意：
wfoe中留在境内、spv、体外孵化 恰当时间进行收购 特殊股东利益处置：
特殊主体特殊权利，梳理、谈判、保留or解除 国有资产处置：国有股的稀释，需要注意相应的程序：国有资产处置程序；公开义务：公开进场；备案 人员安排：实际控制人的竞业禁止、核心科研人员的六人、董事会及高管人员调整：eg派遣财务总监</description></item><item><title>进程与线程</title><link>https://heming6666.github.io/docs/cs/basic/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/basic/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</guid><description>进程和线程 # 进程 # No.1、线程和进程的区别 # 可以从1、概念，2、所拥有的资源，3、开销 三个方面考虑。
从概念上来说，进程是资源分配的基本单位，线程是 CPU 调度的基本单位； 从资源的角度来讲， 一个进程可以有多个线程，线程间可以共享该进程的资源。比如说，进程有自己的独立地址空间，而这一个进程内的线程是共享这一份相同的地址空间的。这就意味着线程切换快，因为不需要切换页表。但同时，要是有一个线程挂掉了，整个进程也会挂掉。相比较之下，进程之间就不会有这种影响，也就是会比较健壮。 当然，除了共享的资源以外，线程也会有私有的一些资源，比如寄存器和栈。 从开销的角度来讲： 我们使用线程的时候，一方面是想要提高它的并发性，可以用多个线程去执行一个进程的不同部分，这样能充分发挥多CPU的功能。 另一方面是可以减少开销，比如 线程的创建时间比进程快，因为进程在创建的过程中，还需要分配内存、文件管理信息，而线程直接共享就可以了； 线程的终止会比进程快，同样的道理，它需要释放的资源会比较少； 线程切换快，因为同一个进程里面的线程都具有同一个页表，在切换的时候就不需要切换页表。 通信问题。线程因为会共享一些全局变量、静态变量等数据，因此线程间通信会方便一些，但也会带来同步和互斥的问题。进程间要通信就需要借助IPC。 共享的有：堆、全局变量、静态变量、指针，引用、文件 线程私有的有栈、寄存器等。 1. 概念:进程是操作系统资源分配的基本单位。 # 进程就是运行起来的可执行程序。我们编写的代码只是一个存储在硬盘的静态文件，通过编译后就会生成二进制可执行文件，当我们运行这个可执行文件后，它会被装载到内存中，接着 CPU 会执行程序中的每一条指令，那么这个运行中的程序，就被称为「进程」。
2. 进程的状态：运行态、就绪态、阻塞态 # 运行状态：该进程正在 CPU上跑； 就绪状态：已经就绪，可运行，但还没有占有CPU，比如时间片用完了； 阻塞状态：该进程暂停运行，等待某一事件发生（比如等待键盘输入），即使给它CPU控制权，它也无法运行；如果完成了，就变成就绪态。 还有：创建状态、结束状态、挂起状态（表示进程没有占有内存空间，在硬盘上） 3. 进程的控制结构PCB # 是一个结构体，用来描述进程。也是进程存在的唯一标识。多个进程的PCCB通过链表的方式连接在一起。 包括：
进程描述信息：进程标识符、用户标识符 进程控制和管理信息：进程当前状态、进程优先级 CPU 相关信息：CPU 中各个寄存器的值 资源：内存地址空间或虚拟地址空间的信息，所打开文件的列表和所使用的 I/O 设备信息。 4.</description></item><item><title>BFS广度优先搜索</title><link>https://heming6666.github.io/docs/algorithm/search/bfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/algorithm/search/bfs/</guid><description>BFS广度优先搜索 # 一、二叉树的层序遍历 # 102.二叉树的层序遍历 # 题目地址：https://leetcode-cn.com/problems/binary-tree-level-order-traversal/
给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。
107.二叉树的层次遍历 II # 题目链接：https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/
给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）
相对于102.二叉树的层序遍历，就是最后把result数组反转一下就可以了。 199.二叉树的右视图 # 题目链接：https://leetcode-cn.com/problems/binary-tree-right-side-view/
给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。
层序遍历的时候，判断是否遍历到单层的最后面的元素 637.二叉树的层平均值 # 题目链接：https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/
给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。
层序遍历的时候把一层求个总和在取一个均值。 429.N叉树的层序遍历 # 题目链接：https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/
给定一个 N 叉树，返回其节点值的层序遍历。 (即从左到右，逐层遍历)。
多个孩子 for (int i = 0; i &amp;lt; node-&amp;gt;children.size(); i++) { // 将节点孩子加入队列 if (node-&amp;gt;children[i]) que.push(node-&amp;gt;children[i]); } 515.在每个树行中找最大值 # 题目链接：https://leetcode-cn.</description></item><item><title>Linux 进程调度</title><link>https://heming6666.github.io/docs/cs/linux-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/linux-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid><description>Linux 进程调度 # 前言 # 在计算机科学中，调度就是一种将任务（Work）分配给资源的方法。任务可能是虚拟的计算任务，例如线程、进程或者数据流，这些任务会被调度到硬件资源上执行，例如：处理器 CPU 等设备。调度器或调度算法的设计与实现最终都会归结到一个问题上，即如何对有限的资源进行分配以实现资源利用率的最大化并满足特定的需求。
调度器是操作系统中的重要组件，操作系统中有进程调度器（Process Scheduler）、网络调度器（Network Scheduler）和 I/O 调度器（I/O Scheduler）等组件，本文介绍的是进程调度器。
进程调度器负责给系统中的所有进程分配有限的 CPU 时间资源。只有通过合理的调度算法，系统资源才能最大限度地发挥作用，多进程才会有并发执行的效果。
进程调度算法总是追求达到以下目标：
公平：保证每个进程得到合理的 CPU 时间，避免进程的饥饿现象。 高效：尽量充分使用 CPU，使 CPU 保持忙碌状态。 快速的响应时间：使交互用户的响应时间应尽可能短。 周转时间：使批处理用户等待输出的时间尽可能短。 吞吐量：单位时间内处理的进程数量尽可能多。 但是很显然，这几个目标是相互冲突的，不可能同时达到。因此只能在这几个方面进行取舍，从而确定自己的调度算法。
进程调度器将进程分为三类：
交互式进程(Interactive process)：这些进程经常与用户进行交互，因此进程不断地处于睡眠状态，等待用户输入。典型的应用比如命令行 shell、文本编辑程序。此类进程对系统响应时间要求比较高，否则用户会感觉系统反应迟缓。
批处理进程(Batch process)：这些进程一般在后台运行，不必与用户交互，需要占用大量的系统资源。但是能够忍受响应延迟。典型的批处理程序如编译程序、数据库搜索引擎等。
实时进程(Real-time process)：这些进程对调度延迟的要求最高，往往执行非常重要的操作，要求立即响应并执行。典型的实时程序比如视频播放软件、或飞机飞行控制系统，很明显这类程序不能容忍长时间的调度延迟。
根据进程的不同分类 Linux 采用不同的调度策略。
对于实时进程，采用 FIFO 或者 Round Robin 的调度策略。
对于普通进程，则需要区分交互式和批处理式的不同。传统 Linux 调度器提高交互式应用的优先级，使得它们能更快地被调度。而 CFS 和 RSDL 等新的调度器的核心思想是“完全公平”。这个设计理念不仅大大简化了调度器的代码复杂度，还对各种调度需求的提供了更完美的支持。
以下列出了 Linux 不同版本调度器的历史：
初始调度器 · v0.</description></item><item><title>The Clean Coder</title><link>https://heming6666.github.io/docs/cs/the-clean-coder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/the-clean-coder/</guid><description>《The Clean Coder》 阅读记录 # 术道结合，这本书不教术，更多的传道，且不仅仅适用于职业，还适用于处理其他事物。尽管是只可意会的道，依然可以通过娓娓道来的叙述与提炼，使读者联系自身经历，揣摩体悟，纳为己用。
0、关于职业素养 # 如何体现职业素养？
从自身出发，回答一个问题：在过去的工作中，遇到过哪些印象深刻的困难，最后是怎么解决的？ 问题不在于问题的难度，而在于反思的程度：怎么分析问题、查阅什么资料、采取解决问题的方式步骤、采取什么措施避免和改进。
从外部出发，是否对外展示了专业精神获得外部人员的信任？是否需要对你进行微观管理才能令人放心？
总结起来，职业素养 = 能力（技术） + 素质（价值观、原则、态度）+ 持续的积累和养成。
关于价值观，可阅读前言部分 “挑战者”号航天飞机工程师的故事。 1、专业主义 # “哦！笑吧，科延，老伙计。这是上帝，或者也可以说时命运或自然，跟我们开的一个玩笑。不过，不管这家伙是谁或是什么，他真幽默！哈哈！” —— 霍华德，《碧血金沙》 清楚你到底要的是什么？真的是成为专业人士吗？不仅仅是荣誉与骄傲，更多的是责任与义务。
担当责任，不仅如何保全自己，还有客户及他人。
不行损害之事：让 QA 找不出任何问题 + TDD 100% 覆盖率的要求 + 随时重构 + 自动化 QA 0、就像医生一样，虽然 Bug 无法避免，但是需要为出现的 Bug 负责。 1、练习道歉，道歉时必要的。 2、不能铭记过去的人，注定要重蹈覆辙。有责任让失误率无限接近零。 专业人士的职业生涯：
了解你的领域，如设计模式。过去来之不易的理念，大部分依然像过去一样富有价值。 坚持学习，与时俱进：想想你会去找已经不看医学期刊的医生看病、会聘请不了解最新税法和判例的税务律师吗？ 需要投入时间和精力去追求和练习（想想音乐家的表演和练习）。因为热爱，额外的20小时能让你免于枯竭匮乏。 合作与辅导是必要的。 了解业务领域：不可以不求甚解，能辨别与质疑。 与雇主 / 客户保持一致：站在雇主的角度思考，而开发人员之间互相认同是容易的，应当避免狭隘之见。 谦逊。 编程是及其自负的行为，专业人士知道此，因此不会故作谦逊：他们熟知自己的工作，并引以为荣；他们对自己的能力充满自信，并因此用于承担有把握的风险。专业人士不是胆小鬼。 然而，专业人士也知道自己会摔跟头，自己的风险评估也有出错的时候，自己也有力不从心的时候。这时候，如果他们照照镜子，会看到那个自负的傻瓜正对着自己笑。 因此，在发现自己成为笑柄时，专业人士会第一个发笑。他从不会嘲讽别人，自作自受时他会接受别人的嘲讽。反之，他则会一笑了之。他不会因别人犯错就对之横加贬损，因为他知道，自己就是下一个犯错的人。 专业人士都清楚自己的自负，也知道上天会注意到这种自负，并加以惩戒。如若果真遭遇挫折，最好的办法就是按照霍华德说的————一笑了之吧！ 2、说不 # “能就是能，不能就是不能。不要说‘试试看’。” ———— 尤达 奴隶没有权利说“不”。劳工或许也对说“不”有所顾虑。但是专业人士应该懂得说“不”。只有敢于说“不”，才能真正做成一些事情。 2.</description></item><item><title>Without ToC</title><link>https://heming6666.github.io/docs/example/table-of-contents/without-toc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/example/table-of-contents/without-toc/</guid><description>At me ipso nepotibus nunc celebratior genus # Tanto oblite # Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.
Quam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque.</description></item><item><title>二叉树 - 子树分解题</title><link>https://heming6666.github.io/docs/algorithm/tree/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/algorithm/tree/1/</guid><description>二叉树 - 子树分解题 # 基础 # https://leetcode-cn.com/problems/diameter-of-binary-tree/ https://leetcode-cn.com/problems/invert-binary-tree/submissions/ https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/ 构造题 # https://leetcode-cn.com/problems/maximum-binary-tree/</description></item><item><title>二叉树 - 构造题</title><link>https://heming6666.github.io/docs/algorithm/tree/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/algorithm/tree/3/</guid><description>二叉树 - 构造题 # https://leetcode-cn.com/problems/maximum-binary-tree/ https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/</description></item><item><title>二叉树 - 遍历题</title><link>https://heming6666.github.io/docs/algorithm/tree/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/algorithm/tree/2/</guid><description>二叉树 - 遍历题 # https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/ https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/</description></item><item><title>商入公司法</title><link>https://heming6666.github.io/docs/law/system/%E5%95%86%E5%85%A5%E5%85%AC%E5%8F%B8%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/law/system/%E5%95%86%E5%85%A5%E5%85%AC%E5%8F%B8%E6%B3%95/</guid><description>“商入公司法” # 商法调整的是商事关系，商事几乎包括各种以营利为的商品交换以及与此相关的其他活动。
一般而言，商事关系具有以下特征：一是主体的平等性；二是只发生在以营利为目的而进行的商事活动过程，这是商事关系区分于其他法律关系尤其是普通民事关系的最重要的特点。营利至少包括获取利益、常业性。
商法按内容来分包括商事组织法与商事行为法。
商组织作为从事商活动的主体，关系到方方面面，法律自然要设定规范，规制其准入与存续。商组织法包括商事主体的设立、组织、管理、变更、解散、破产、清算而发生的内外关系。对外关系主要由债等民法调整，因而主要是对内关系。 商行为存在着商活动的特性，有别于一般的民事行为，因而也被特殊规定。商行为法包括票据法、证券法、保险法和海商法等商法部门。 公司法是最主要的商组织法。
公司本质 # 公司的法律性质即为最底层的法律原则。
公司概念 # 在大陆法系国家，公司仅指具有法人资格的营利性社团，从实质来看，它至少具有三个要素构成，即独立的人格、个人结合的社团、以营利为目的；在形式上它还要满足依法设立，即依据商事法律规定的条件和程序而设立公司。
人格性 # 指公司具有独立的人格，这种独立的人格使其能够区别于其成员而独立存在。
人格是权利义务的归属点，拥有人格意味着公司具有权利能力和行为能力，能够享有权利，承担义务。能够独立从事经营活动，实施法律行为，并能够依法承担民事责任。
公司人格的外征表现：名称（区分）、独立财产（承担责任，公司的财产丧失可能导致人格也消灭）、自己的组织机构（意志形成、行为执行）。
公司需要依法登记才能取得独立人格地位。因此在一定意义上可以说完全是法律的产物，是法律上的一种拟制。（1）采用二元主体的民事架构，最主要的目的在于方便公司从事各种经营活动；（2）拟制并不意味着有实体，因而公司人格具有可否认性。
社团性 # 即以社员的结合作为其成立基础，我国《公司法》采用的是企业法人，民法典表达为“营利主义”。现代公司法显示承认一人公司的存在已成为时代的潮流，我国现行公司法也已经突破了公司的社团性，规定了一人有限责任公司。
营利性 # 以营利为目的指组织公司成员各自以其出资经营某项事业并将公司所获得的利益分配给它的社员作为最终目的。
公司企业存在的目的在于追求利润最大化，表现为（1）股利的分配；（2）剩余财产的分配。
现代公司法要求公司在考虑利润最大化目标时，也要兼顾“利益相关者（stakeholder/other constituencies）”的利益，即承担一定的社会责任。
公司特征 # 制度的价值、作用，主要内容，法律立场。
即公司这种企业区别于其他商事组织，而使其成功的原因特征：集中管理、所有人的有限责任、的股权自由转让和公司的永久存在。
集中管理 # 所有权和经营权的分离，将公司交给更具备专业技术经验的经营者。但集中管理在封闭公司是不明显的。
投资者有限责任的产生：既然股东不能直接参与企业管理，又怎么能够像合伙人承担无限责任呢 所有者权益的自由转让：如果股东对公司经营不满意，他可以通过股权转让退出公司。 公司的独立主体地位：只要投资人愿意，公司可以无限期地存在。 有限责任 # 按认缴的出资额或认购的股份份额承担责任。核心是在公司和其股东划出一条明显的界限。“简单来讲，对于投资者而言其可以多项投资，更敢更省事；对于实际经营管理者而言，只有公司经营良好才不至于使股权被收购自己被替换。”
降低监控代理人的成本，投资人可以多样化投资来分散风险，也可以多样化和消极监督 降低监控其他股东的成本，合伙制情形下合伙人还要监督其他合伙人的财产状况 股份自由转让会刺激管理层进行更为有效的管理 有限责任存在股份交易的公开市场，价格能够极大的企业价值的附加信息，减少投资人花费大量资源去考察附加信息 投资者可以多样化投资，这也大大降低了企业筹资成本 促进投资者投资风险事业的投资而不至于遭受毁灭性损失 股权自由转让 # 公众公司存在为其股份转让的公开市场。
股东可以自由退出而公司资本不致减少 促使公司管理水平的提高 公开市场能够最大限度地反映财产的价值 公司的永久存在 # 实际含义是公司不会像合伙企业那样因为成员的退出而导致解散，合伙的存在依附于合伙协议。公司”永续存在“，但其控制权却可能发生了无数次的易手。</description></item><item><title>国际投资仲裁的发展与改革</title><link>https://heming6666.github.io/docs/law/system/%E5%9B%BD%E9%99%85%E6%8A%95%E8%B5%84%E4%BB%B2%E8%A3%81%E7%9A%84%E5%8F%91%E5%B1%95%E4%B8%8E%E6%94%B9%E9%9D%A9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/law/system/%E5%9B%BD%E9%99%85%E6%8A%95%E8%B5%84%E4%BB%B2%E8%A3%81%E7%9A%84%E5%8F%91%E5%B1%95%E4%B8%8E%E6%94%B9%E9%9D%A9/</guid><description>国际投资仲裁的发展与改革——为什么仲裁结果总是不统一，除了增加透明度与设立上诉机制我们还能做什么 # 国际投资仲裁概况 # 20世纪60年代后期，国际社会开始尝试将国际仲裁作为解决主权国家与外国私人投资者之间投资争议的方式，缔结了《华盛顿公约》，建立了解决投资争议国际中心ICSID，ICSID允许加入国拒绝将某项具体争议提交ICSID仲裁，也有权将某些种类的争议排除在可仲裁的范围之外。因而更为可接受，但20世纪90年代子厚，这种节制的机制开始逐渐失去戒指，美式BIT和一些区域性贸易协定的投资章节规定投资者可以直接提请国际仲裁，导致国家主权的行政权、司法权、立法权受到挑战。
实体问题 # 适格投资、适格投资者的范围过于广泛：华盛顿公约允许将缔约国国民控制的非缔约国公司视为公约意义上的合格投资者 模糊的实体法规范：没有统一的解释，使主权国家对专辑的行为符合shi&amp;rsquo;fou条约要求缺乏预见性，也为仲裁庭随意解释这些条款增加的条约义务了chuang&amp;rsquo;zao条件。eg公平公正没有准确的标准可循。 措施的概念过于宽泛，只要投资者认为东道国采取的措施违反了在投资条约下的义务就可以提起国际仲裁，而措施已经不仅包括行政管理措施，还包括东道国的司法行为和立法行为。egloewen诉美国案认定法院在案件审理过程中存在严重的审判不公和行为不当的情形。 程序问题 # 东道国无需具体同意，而是”概括的同意“，在事前的同意时，东道国同意将争议提交国际仲裁裁决时，根本无法与之ujin&amp;rsquo;h会否与投资者发生纠纷以及因何原因发生纠纷。 现代投资条约中的程序性涉及缺乏对仲裁员自由裁量权和仲裁程序的适当监督和对不一致裁决的适当协调和纠正，出现投资者倾向的仲裁员。 执行不被认可。 现代投资条约为投资者提供了诸多挑选救济场所的机会，可以通过多个BIT重复申请。 国际投资仲裁的发展与改革现况 # 仲裁特征：一裁终局和自由选择仲裁员。
概况：美欧对国际投资仲裁机制进行改革的不同模式 # 针对国际投资仲裁机制的缺陷，美国与欧盟在传统双边协定模式的基础上，分别以北美自由贸易协定模式与常设仲裁模式加以改革。**两种模式在仲裁员由谁指定、上诉机制的设置以及仲裁庭的常设性和多边性等存在制度分歧。**美欧的制度不仅反映了两者对国际投资仲裁机制改革应采取投资者主导型还是东道国主导型路径的不同认知，还反映了两者对国际投资仲裁制度主导权的争夺。（1） 关于国家投资仲裁的改革，主要集中在是否建立一个常设的投资仲裁法庭和规定上诉机制的问题上。联合国贸易和发展委员会议提出了详细的国际投资协定的改革建议，包括设立一个常设的攻击投资仲裁法庭以及上诉机制。（7）
投资争议解决机制是近四十年来国际投资协定中的常见条款，投资者诉国家解决争端解决机制（ISDS，investor-State Dispute Settlement）赋予投资者国际仲裁方式起诉东道国的权利。 （2）
UNCTAD world investment report 可以看到现在的国际投资仲裁数量
有人认为，国际投资仲裁制度或许正遭遇一场“正当性危机”（legitimacy crisis，即国际投资仲裁由于在解决国际投资争端方面不胜任而引发的信任危机。主要在于1投资条约中没有清楚、确定地规定投资者权利标注暖，致使当事人、仲裁庭在适用投资条约时缺乏预见性，尤其时不同仲裁庭就类似案件的决定常常不一致2国际投资条约在程序上对投资者利益的保护甚于对东道国利益的保护，有损东道国主权（3） 事实表明，传统给国际商事仲裁引以为自豪的一些优势，如非公开地处理争端、仲裁庭的成立相对简便易行、仲裁裁决一裁终局且具有强制执行力、仲裁员拥有充分的自由裁量权等，反而被证明具有种种缺陷，因为这涉及判断一个主权行为是否在国际法上属于合法行为。（程序实体） 2013年6月，联合国贸易与发展大会（UNCTAD）曾发布一份报告，对目前国际投资仲裁制度受到广泛诟病的几个方面进行了总结，并未如何改革提出了”路线图“，根据该报告，目前国际投资仲裁机制的弊端主要包括：程序的正当性和透明度不够（我们一般讲的正当性不够指的是更加倾向于投资者的利益，背景是最开始签订的时候发展中国家就让渡了相应的权利以求投资，一开始就是不平等的；指的是对公众知情权东道国公权力行使的侵犯：是相对于一般的商事仲裁而言的）；仲裁裁决缺乏一致性以及错误的裁决无法纠正（同类案不同判，同类规定不同解释。国际投资仲裁中，任何仲裁庭的裁决都不会对其他仲裁庭有任何约束力，仲裁庭都有权就自己案件中争议的问题重新进行审判）；仲裁员由当事人指定，使仲裁员的独立性和中立性都受到质疑；使仲裁程序的时间和经济成本过高。（5）裁决的矫正机制缺失：是哟个法律不正确并不是ICSID公约的裁决撤销理由。不一致可以从伊克卡乐公司案与基里克案关于投资者是否需要用尽当地救济才能够提起国际投资仲裁二者做出了截然不同的解释，并且仲裁员中的桑兹教授均为仲裁员。（8） 评价制度和评价改革就能够从与目前国际投资仲裁的弊端具有什么样的相关关系来进行逐条分析。
ICSID的成立是改善发展中国家投资环境所作出的一项重要的多边努力。现在，ICSID不在苦于案源不足，而是逐步意识到在效率、声誉等方面面临着挑战，呼吁投资者积极利用ICSID调节机制或自行解决争端。有学者认为ICSID裁决缺乏一致性；更有学者批判国际投资仲裁的程序缺陷，如仲裁员存在偏见、程序不公开、耗时费钱等。（4）
众所周知，ICSID的产生很大程度上是二战后南北矛盾的产物，其发展也是南北矛盾演进的一个缩影。换言之，发达国家虽然认为发展中家落后的法制状况难以为外国投资者提供有效保护，但也意识到传统外交保护可能被认为是干涉内政，因而谋求创设某种国际争端解决机制。与此同时，为吸收外资并避免发达国家以保护海外投资为名干涉内政，暗中国家fa&amp;rsquo;z对于创设国际争端解决机制也具有显示的利益，因而同意适当让渡对涉外投资争端的管辖权。（4） 1肇始于于20世纪下半夜的国际投资法律制度源于解决资本输出国的外国投资者在资本输入国受到不公正待遇而制定额双边投资协定，早期主要目的在于避免后殖民化时期外国投资者受到东道国不断改革的法律和这个测制度所产生的负面影响。二战后面对的是东道国对于其财产的征收通常没有给予补偿，而这种行为明显侵犯其财产权和其他权力。2随着经济民族主义的衰退，发展中国家开始采取各种方法吸引外资，在很大程度上不公正对待外国投资的现象少了，这一时期的投资争端数量减少了而且集中东道国对外国投资的歧视或违反公平公正待遇等问题上3随着21实现可持续发展的目标提出以及国家对外国投资带来负面印象，投资者根据相关投资以xi的尸体保护标准提起赔偿诉求的案件不断增加，而仲裁庭做出䣌不利于东道国的巨额赔偿裁决给的东道国经济发展带来沉重的负担，包括发达国家也开对国际投资仲裁有了怀疑态度。（8）
国际投资法正在经历一个巨大的变化，相较于过去只重视投资者利益的做法，人们越来越意识到投资仲裁中的公法属性，(9)
卡尔沃主义：在西方探险家发现每周新大陆后，拉美国家开始遭受西方列强以外交保护为名干涉内政的痛苦经历，国家主权受到严重侵犯，在此背景下，19世纪阿根廷国际法学家卡洛斯·卡尔沃提出了著名的”卡尔沃主义“，其根本总之在于拒绝干涉内政，维护国家主权。卡尔沃主义的基本原则有两项：一是主权国家基于主权平等原则不受任何形式的干涉；而是外国人物权享受东道国没有对国民规定的权利或特权，外国人只能寻求当地救济，不干涉及外国人与本国人之间的绝对平等是卡尔沃主义的本质所在。（4）
美国与欧盟模式 # 传统双边投资协定模式（传统BIT模式）：脱胎于商事仲裁，授予投资者对东道国政府违反国际投资协定的行为提起仲裁的权利，允许其自由选择国际投资争端解决中心ICSID或联合国国际贸易法委员会UNCITRAL提供的仲裁规则或双方约定的其他仲裁规则开展仲裁，双方投资协定对仲裁员制定、仲裁程序透明度和参与性、上诉机制、轻佻仲裁请求（frivolous claim）、竞合或平行程序等不做限定或补充。这种模式在20世纪90年代之前发达国家和发展中国家签订的投资双边协定中比较常见。 2.环境变化： 20世纪90年代之后，国际投资环境发生变化，新兴国家崛起，南南合作、北北合作增加，资本流动不再限于南北国家之间的依附性流动。争议对象多为发达国家的公共健康及环境政策，而不再是传统上东道国政府对投资财产的直接征收措施。投资争议类型的改变，催生国际投资仲裁机制功能的改变，资本输出国所提供的条约文本不仅需要具备海外投资利益保护的“攻击性”功能，还需具备防范境外投资者滥诉以及制约本国政府形式提供环境、公共卫生等公共产品只能的“防御性”功能，并由此改善国际投资法环境。 （2）对当前ISDS机制最常见的批评是认为它威胁到主权国家通过立法实现合法公共政策目的的能力。仲裁裁决没有充分保护政府的管制权，仲裁庭解释权过大，损害了政府的权利。 美国：率先对攻击投资仲裁机制做出调整，94年《北美自由贸易协定》第11章国际投资仲裁条款对传统BIT模式做出修订，形成北美自由贸易协定模式（NAFTA模式）NAFTA模式仍允许争端方选择ICSID和UNCITRAL等投资仲裁规则，但在协定中对后者做出补充或限制。例如：该协定增加了仲裁程序的透明度，允许非争议第三方及“法庭之友”提交意见书。浙西都是对传统BIT模式的调整。又如，在争端方未能制定仲裁员或首席仲裁员的情形下，该协定将ICSID仲裁规则下世界银行行长对仲裁员的制定权转移至《北美自由贸易协定》秘书处，从而强化了争端放对仲裁员的控制，对传统BIT模式形成限制。 NAFTA对于仲裁机制的改革并不彻底，虽然提高了国际投资仲裁程序的透明度与参与性，但未从根本上解决仲裁庭的问责性不足和裁决不一致问题。美国在《美国与中美州五国和多米尼加自由贸易协定》及《美国与新加坡自由贸易协定》中提出设置上诉机制的构想，以强化仲裁机制的问责性。2016年签署的《跨太平洋伙伴关系协定TPP》中有关仲裁程序的透明度、第三方参与、上诉机制的条款亦延续了美式投资协定对NAFTA模式进行改革的传统。（11）目前，除美国以外，NAFTA模式还为加拿大、日本、韩国等国对外签订的国际投资协定所采纳。中国在2014年签署的《中加投资促进及保护协定》和2015年签署的《忠告自由贸易协定》中也采纳了此模式。 欧盟：欧盟第国际投资仲裁机制的改革要晚于美国，但改革力度更大。其背景在于1999年金融危机后，比利时、希腊、塞浦路斯等欧盟成员国因调整财政政策而纷纷陷入投资争端12，使得欧洲议会不得不正视国际投资仲裁机制对欧盟公共政策的挑战，要求欧盟委员会制定具体政策，避免成员国公共政策成为投资者起诉对象。（出于国家自愿，所以体现了国家的主观目的特征）在与美国进行的2013年《跨大西洋贸易与投资伙伴协定TTIP》谈判中，欧洲市民高呼废除国际投资仲裁机制，而欧洲议会及欧盟委员虽然最终决定保留国际投资仲裁机制，但对其予以答复改革，例如严格限定仲裁员资质和任期、固定仲裁原名册、设立上诉机制等（14）。草案不仅允许仲裁庭接受法庭之友意见（amicus curiae），也允许与案件结果有直接现实利益的第三方接入到程序中（right to intervene）,有助于加强程序公正；草案要求接受第三方资助的当事方披露资助方的信息，以及要求缴纳担保费，看可以限制投资者轻率起诉；草案提出建立上诉法庭，其主要理由是解决投资仲裁裁决的一致性问题；上诉法庭由6位法官组成，欧盟、美国和第三国各占2席，任期6年，可连任一次。 2015年5月欧盟贸易委员提交的一份报告提出设立常设仲裁庭的构想15，设立常设仲裁庭、以东道国为主导的常设仲裁庭模式最终出现在2016年欧盟与加拿大和越南分别达成的《欧加全面经济与贸易协定》和《欧越自由贸易协定》中。常设仲裁庭与NAFTA模式一致的地方在于，投资者依然可以适用ICSID与UNCITRAL等仲裁程序规则，国际投资协定对仲裁程序的透明度、第三方参与等问题作出较补充。但常设仲裁模式目前仍处于摸索阶段，仅在上述自由贸易协定中出现，尚不具有普遍性。
2015年末，欧盟公布了与美国进行《环大西洋贸易和投资伙伴协定》谈判的投资章节的建议草案，之后欧加贸易协定、欧越贸易协定，都包括改革后的国际投资争端积极而机制，即设立常设的投资仲裁法庭制度，包括普通法庭共和上诉法庭。 欧盟包括三点：1消除国际商事仲裁制度运用于解决投资者-国家投资争端的弊端；与投资仲裁对东道国国内造成的影响不匹配；增强裁决一致性的建议层出不穷，而建立上诉机制一致被认为是最好的方法，如建立类似世界贸易组织上诉机构的上级法律组织来指导、监督临时成立的仲裁庭的工作。但要实现这一点，困难十足，在欠缺所谓“初步裁决”只丢的昂下qing&amp;rsquo;k，需要对当前主流制度性规定做出修改需要有关成员国就此问题达成政治和李，eg华盛顿公约裁决不得被任何上诉神擦汗，要修改需要得到全体成员国协商一致。设置解释委员会：仲裁员拥有的自由裁量权和解释条约的权因此设立解释力过大，甚至可能做出为违反缔约国意图，因而设立一个由各投资者组成的解释委员会，使成员国对涉及其自身的条款有更大的解释权。但是这样的杰斯还行只能适用于生效之后的诉请，而不具有任何溯及力，因而可能造成“亡羊补牢”的效果。增加透明度：目前只有在仲裁双方共同同意时才能将仲裁文件公开，因此很多投资者诉东道国的案件根本没有或者只有极少数文件被公布出来，欧盟不仅投资建立了对公众开放注册登录及查阅的数据库，主要从公开仲裁程序的重要文件，许可法庭之友的书面陈述及听证会分开等方面提高程序的透明度，2增强对东道国维护公共利益措施的考量，尽可能在保护投资者私人利益和为u东道国公共利益之间取得平衡3尽力防止投资者对投资仲裁程序的滥用。（9）</description></item><item><title/><link>https://heming6666.github.io/docs/algorithm/lru/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/algorithm/lru/</guid><description>LRU # 要用哈希表 + 双向链表 哈希表：快速查找节点 双向链表 队头：最近访问的，或新加入的 队尾：最久未被访问 题目要求两个方法：
get（） 如果不存在，返回-1 如果存在： 通过key找哈希表，得到节点 moveToHead 将该节点移到队头 返回节点的值 put（） cache.count(key)不存在的话 new新链表节点 加到哈希表 addToHead 添加到头部 size++判断是否超出容量，如果超出： removeTail 删除尾部 删除哈希表cache.erase size&amp;ndash; delete链表节点 否则就是已经存在： cache[key] 拿到节点 更新node-&amp;gt;value为新的值 moveToHead 将该节点移到队头 主要方法：
查找由哈希表负责 插入：要插哈希表，要插链表头,size++ 删除：要删哈希表，要删链表尾，size&amp;ndash; 变更：链表先删再插 注意:
用双向链表，且带伪头节点和伪尾节点 每次要注意是不是要同时操作链表和哈希表</description></item><item><title/><link>https://heming6666.github.io/docs/algorithm/%E4%BD%8D%E8%BF%90%E7%AE%97%E6%8A%80%E5%B7%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/algorithm/%E4%BD%8D%E8%BF%90%E7%AE%97%E6%8A%80%E5%B7%A7/</guid><description>位运算技巧 # 1、转换操作 # 转小写 (&amp;#39;a&amp;#39; | &amp;#39; &amp;#39;) = &amp;#39;a&amp;#39; (&amp;#39;A&amp;#39; | &amp;#39; &amp;#39;) = &amp;#39;a&amp;#39; 转大写 (&amp;#39;b&amp;#39; &amp;amp; &amp;#39;_&amp;#39;) = &amp;#39;B&amp;#39; (&amp;#39;B&amp;#39; &amp;amp; &amp;#39;_&amp;#39;) = &amp;#39;B&amp;#39; 互换 (&amp;#39;d&amp;#39; ^ &amp;#39; &amp;#39;) = &amp;#39;D&amp;#39; (&amp;#39;D&amp;#39; ^ &amp;#39; &amp;#39;) = &amp;#39;d&amp;#39; 2、正负号一样？ # int x = -1, y = 2; bool f = ((x ^ y) &amp;lt; 0); // true int x = 3, y = 2; bool f = ((x ^ y) &amp;lt; 0); // false 3、n&amp;amp;(n-1) 的应用 # 用于消除n的二进制表示中的最后一个1。</description></item><item><title/><link>https://heming6666.github.io/docs/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid><description>动态规划 # 确定dp数组（dp table）以及下标的含义 确定递推公式 dp数组如何初始化 确定遍历顺序 举例推导dp数组 509. 斐波那契数 # 题目地址：https://leetcode-cn.com/problems/fibonacci-number/
解法1：递归
解法2：动态规划，一维数组
解法3：动态规划，状态压缩缩
70. 爬楼梯 # 题目地址：https://leetcode-cn.com/problems/climbing-stairs/
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
746. 使用最小花费爬楼梯 # 题目链接：https://leetcode-cn.com/problems/min-cost-climbing-stairs/
数组的每个下标作为一个阶梯，第 i 个阶梯对应着一个非负数的体力花费值 cost[i]（下标从 0 开始）。
每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯。
请你找出达到楼层顶部的最低花费。在开始时，你可以选择从下标为 0 或 1 的元素作为初始阶梯。
62.不同路径 # 题目链接：https://leetcode-cn.com/problems/unique-paths/
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。
问总共有多少条不同的路径？
63. 不同路径 II # 题目链接：https://leetcode-cn.</description></item><item><title/><link>https://heming6666.github.io/docs/algorithm/%E5%8F%8C%E6%8C%87%E9%92%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/algorithm/%E5%8F%8C%E6%8C%87%E9%92%88/</guid><description>双指针 # 1、数组 # 27. 移除元素 # 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
删除数组里的元素，只能覆盖！
fast: 遇到对应元素就略过；遇到最终留下来的，赋值给slow.
slow: 这个坑是填最终要留下来的数的
26. 删除有序数组中的重复项 # 给你一个有序数组 nums ，请你原地删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。
fast与slow. 记得更新 val. 283. 移动零 # 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
fast：遇到0就略过；不是0就往前填 swap slow 977. 有序数组的平方给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。 # 平方的最大值就在数组的两端，不是最左边就是最右边。</description></item><item><title/><link>https://heming6666.github.io/docs/algorithm/%E6%8E%92%E5%BA%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/algorithm/%E6%8E%92%E5%BA%8F/</guid><description>排序算法 # 快速排序 # 1、快速排序的基本过程？ # 用分治的思想。 选一个基准元素。把比这个元素小的放左边，大的放右边。这时候基准元素所处的即为最终的位置。 递归对左右两边都采取一样的方法，直到没有元素或只有一个元素。 void quickSort(vector&amp;lt;int&amp;gt;&amp;amp; nums, intleft, intright) { if (left &amp;gt;= right) { return; } int index = partition(nums, left, right); quickSort(nums, left, index - 1); quickSort(nums, index + 1, right); } void quickSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) { quickSort(nums, 0, nums.size() - 1); } 2、分割的过程是什么样的？ # 假设 pivot 作为基准元素。 从数组的右端向左扫描找到第一个小于它的元素。 再从数组的左端向右扫描直到找到第一个大于它的元素。 交换这两个元素。 不断进行这个过程，就可以保证左指针 i 的左侧元素都不大于切分元素，右指针 j 的右侧元素都不小于切分元素。当两个指针相遇时，把基准元素和相遇的这个位置交换。</description></item><item><title/><link>https://heming6666.github.io/docs/cs/open-source/%E6%9D%82%E8%B0%88/%E5%BC%80%E6%BA%90%E5%A4%A7%E5%AE%B6%E8%B0%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/open-source/%E6%9D%82%E8%B0%88/%E5%BC%80%E6%BA%90%E5%A4%A7%E5%AE%B6%E8%B0%88/</guid><description>开源大家谈 # 近十年To B的国内外公司采用开源Core+SaaS，开源好处：最高效的开发模式；获客，得到更多的用户，测试和反馈，最重要的客户需求，用户的用法，会超出想象；基础设施必须开源。 开源文档很重要，发展开源社区，把Credit给别人。 得到高手帮助，提高自己能力，不要想得太难。代码开源，有生命力，更长的生命周期；把东西做好，回报自然来，平常心享受过程，很好的经历，未来还有商业机会。</description></item><item><title/><link>https://heming6666.github.io/docs/example/collapsed/3rd-level/4th-level/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/example/collapsed/3rd-level/4th-level/</guid><description>4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.
Venasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto!</description></item><item><title/><link>https://heming6666.github.io/docs/example/hidden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/example/hidden/</guid><description>This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.
Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem.</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/buttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/buttons/</guid><description>Buttons # Buttons are styled links that can lead to local page or external link.
Example # {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}} Get Home Contribute</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/columns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/columns/</guid><description>Columns # Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis!</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/details/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/details/</guid><description>Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.
Example # {{&amp;lt; details &amp;#34;Title&amp;#34; [open] &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} {{&amp;lt; details title=&amp;#34;Title&amp;#34; open=true &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} Title Markdown content # Lorem markdownum insigne&amp;hellip;</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/expand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/expand/</guid><description>Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example # Default # {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Expand ↕ Markdown content # Lorem markdownum insigne&amp;hellip; With Custom Label # {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne.</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/hints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/hints/</guid><description>Hints # Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example # Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/katex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/katex/</guid><description>KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX
Example # {{&amp;lt; katex [display] [class=&amp;#34;text-center&amp;#34;] &amp;gt;}} f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi {{&amp;lt; /katex &amp;gt;}} Display Mode Example # Here is some inline example: \(\pi(x)\) , rendered in the same line. And below is display example, having display: block \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Text continues here.</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/mermaid/</guid><description>Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.
Override Mermaid Initialization Config
To override the initialization config for Mermaid, create a mermaid.json file in your assets folder!
Example # {{&amp;lt; mermaid [class=&amp;#34;text-center&amp;#34;]&amp;gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --&amp;gt; State2 note left of State2 : This is the note to the left.</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/section/first-page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/section/first-page/</guid><description>First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/section/second-page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/section/second-page/</guid><description>Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description></item><item><title/><link>https://heming6666.github.io/docs/shortcodes/tabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/shortcodes/tabs/</guid><description>Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example # MacOS MacOS # This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis!</description></item><item><title>《中国政府与经济发展》</title><link>https://heming6666.github.io/docs/other/%E4%B8%AD%E5%9B%BD%E6%94%BF%E5%BA%9C%E4%B8%8E%E7%BB%8F%E6%B5%8E%E5%8F%91%E5%B1%95%E5%85%B0%E5%B0%8F%E6%AC%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/other/%E4%B8%AD%E5%9B%BD%E6%94%BF%E5%BA%9C%E4%B8%8E%E7%BB%8F%E6%B5%8E%E5%8F%91%E5%B1%95%E5%85%B0%E5%B0%8F%E6%AC%A2/</guid><description>兰小欢《中国政府与经济发展》读书笔记 # 上篇：微观机制 # 一、地方政府的权利与事务 # 社科理论，刻意追求标新立异无意义；社会现象非常复杂，单一理论只能启示某个侧面，从不同理论中看到共同之处，方能融会贯通。实事求是了解现状、依托现实提炼理论，避免用理论歪曲事实。 实事求是。 不能脱离政府谈经济。
决定了要干哪些事，才能决定要用什么资源。因此事权是理解政府间资源分配的基础。
事权划分的三种理论：
公共服务的规模经济与边界 信息复杂性 激励相容 1、公共服务的规模经济与边界 # 2、信息复杂性 # 上级拥有形式权威，下级因为有信息优势，因此拥有实际权威。如官与吏。 存在信息的获取问题，因此体制内的文山会海； 存在信息的扭曲和隐瞒，因此上级的监督和审计就有必要。但监督机制本身也受信息的制约。 信息复杂多变，模糊不清的地方太多，繁杂事权没有清楚的法律界定，所以体制内的实际权力和责任都高度个人化，体制内的规章制度也无法完全取代个人信任，因此上级在提拔下级时，除考虑工作能力之外，关键岗位上都要尽量安排信得过的人。 一件事该不该做？要做到什么程度？怎么样才算做好？做好了算谁的功劳？做砸了谁负责？所谓权利，就是在说不清楚的情况下由谁来拍板决策的问题。权利的自然集中就可能造成专权和腐败。 国家土地监察制度的驻地效应：
城市化过程土地价值飙升，违法现象（越权批地、非法占用割地）层出不穷，且违法主体多是地方政府或相关机构，其下属的土地管理部门无力防范和惩处。06年建国家土地监察制度，设国家自然资源总督察，向地方派驻督察局，但只有9个，在驻地城市的震慑和查处效果比其他地方强。
3、激励相容 # 如果一方想做的事，另一方既有意愿也有能力做好，就叫激励相容。
事分两类：
比较具体，规则和流程相对明确，成果比较容易衡量和评价 ———— 垂直管理 抽象和宽泛，只有大致目标，如经济增长和稳定就业，需要下级发挥主动性和创造性调动资源去达成 ———— 地方管理 与地方经济密不可分的，即使专业性较强的部门，也不能垂直管理。如工商局、环保局。</description></item><item><title>《中国近代史》</title><link>https://heming6666.github.io/docs/other/%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A3%E5%8F%B2%E8%92%8B%E5%BB%B7%E9%BB%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/other/%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A3%E5%8F%B2%E8%92%8B%E5%BB%B7%E9%BB%BB/</guid><description>蒋廷黻《中国近代史》读书笔记 # 一、剿夷与抚夷 # 4、民族丧失二十年的光阴 # 鸦片战争失败的根本理由：军器和军队是中古的军队、政府是中古的政府、人民、士大夫阶级是中古的人民。因此虽拼命抵抗，终归失败，是自然的、逃不脱 的。 鸦片战争的军事失败还不是民族致命伤，失败以后还不明了失败的理由，力图改革，才是民族的致命伤。 为何？ 中国人的守旧性太重。 我国文化是士大夫阶级的生命线。一实行新政，文化摇动，就是饭碗的摇动。 士大夫阶级最缺乏独立的、大无畏的精神。</description></item><item><title>《解读中国经济》</title><link>https://heming6666.github.io/docs/other/%E8%A7%A3%E8%AF%BB%E4%B8%AD%E5%9B%BD%E7%BB%8F%E6%B5%8E%E6%9E%97%E6%AF%85%E5%A4%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/other/%E8%A7%A3%E8%AF%BB%E4%B8%AD%E5%9B%BD%E7%BB%8F%E6%B5%8E%E6%9E%97%E6%AF%85%E5%A4%AB/</guid><description>林毅夫《解读中国经济》读书笔记 # 粗浅读之，即便对于传统的经济学理论没有甚至初级的了解，从零开始，也通过林老师的介绍，收获颇多。简单归纳，以求在知识图谱中扎上这么一段清晰而博大的中国经济知识。
我将从《解读中国经济》得到的知识分为三类。一是有关中国经济的过去、现在和未来；二是新结构经济学是什么；三是新结构经济学理论将是什么。
中国经济的过去、现在和未来 # 中国经济的过去、现在和未来是极具代表性的发展中国家的过去、现在和可能的未来。
过去，中国经济带着和其他发展中经济体的共同共性，寻求可以逐渐发展和现代化的方法。几乎全部的发展中国家一开始选择的是追赶和超过发达国家，一切资源都集中在资本集中型和技术集中型，由政府统一调配。此项政策施行之后，经济发展缓慢，虽然现代化进程有所前进，但是GDP却没有很大的增长。
经济危机频发后，发达国家主张新自由主义，即鼓吹政府退出干涉，由市场自由调节。于是，又几乎所有的发展中国家直接摒弃之前的政府调配政策，这样的后果是经济危机加剧而发展更加缓慢。 反倒是中国，采用政府调配与市场竞争并行，既有有为政府又有有为市场，反倒是这个开始被大家公认为“两不像”的政策取得了最后的胜利。
新结构经济学是什么 # 循着这条历史路径，林老师向我们揭开了新结构经济学的序幕。
新结构经济学，即研究结构的经济学，采用亚当斯密的“原因、本质”的研究方法，探究构成结构的原因与本质，由此构建适合各个国家自己的经济理论。
新结构经济学的出发点是要素禀赋，由要素禀赋到比较优势，由比较优势决定了产业，以上均围绕最低要素生产成本，并辅之以合适的硬的基础设施和软的制度安排。
要素禀赋，要素只主要以生产要素为主的一个国家的要素，禀赋指决策者在做决策时考虑的全部东西。决定一个国家发展的因素有很多，但起决定性因素的是要素禀赋，要素禀赋可以简单理解成当一个国家发展经济时，其能够依靠的好与不好的物质因素。
比较优势，典型的即发展中国家对比发达国家，其特点就是劳动力资源充足，而资本及技术资源劣后，因此，发展中国家的核心优势即是劳动密集型产业。同时，通过从发达国家进口技术与资本，发展中国家能够利用极少的风险和成本，获得产业升级等。而发达国家要进行技术与资本的革新，需要承担极高的成本风险。
产业，建立于要素禀赋之下。在发展中国家可以分为两类，一类是劳动密集型产业，劳动力成本廉价，会引得市场争相投入，商人有足够的动力，只需要考虑与经济发展方向适合的引导；一类是技术、资本密集型产业，发展国家在该种产业中劣后，动力不足，一旦离开政府的补贴扶持，很容易倾覆，而这一类产业通常是与民生相关的基础产业。
深入要素禀赋，即是要建立符合各国家自己产业结构的经济发展政策，将各国不同的结构要素考虑在内，而不同于发达国家略去此类因素的二维经济学，是适应各国家的三维经济学。
新结构经济学将是什么 # 在此基础上，深入对重要结构要素的具体探究，并以中国现在的经济政策作为例子，进一步构建宏观新结构经济理论。
“这是一个需要理论而且一定能够产生理论的时代，这是一个需要思想而且一定能够产生思想的时代。我们不能辜负了这个时代。”
经济理论的发展中心往往是世界经济中心，因为经济理论的发展需要素材，而今，发达国家缺的是素材，因为它们的经济已经趋向稳定，大多只是脚注性的研究，而中国经济学家有最新的素材。这是时代赋予我们的使命。</description></item><item><title>《重读马克思》</title><link>https://heming6666.github.io/docs/other/%E9%87%8D%E8%AF%BB%E9%A9%AC%E5%85%8B%E6%80%9D%E9%9F%A9%E6%AF%93%E6%B5%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/other/%E9%87%8D%E8%AF%BB%E9%A9%AC%E5%85%8B%E6%80%9D%E9%9F%A9%E6%AF%93%E6%B5%B7/</guid><description>韩毓海《一篇读罢头飞雪，重读马克思》读书笔记 # 人间喜剧 # “召唤亡灵的行动” # 《路易波拿巴的雾月十八日》讲述的两个问题：
法国政治体制的变迁：议会民主 -&amp;gt; 宪政制度（大工业资产阶级） -&amp;gt; 国家官僚制度（法国小农） -&amp;gt; 流氓无产者政治（金融资本家） 政治制度变迁背后的阶级关系和阶级斗争。 国家官僚制：小农不能为自己做主，就幻想着“青天大老爷”骑在自己头上为自己做主。小农的生活方式是自给自足，没有发展出自己的经济交换方式，因此也没有组织这种经济交换方式的政治制度形式，即“不是一个阶级”。 欧洲七次反法战争的实质：拿破仑（翻身农民军队）欲摧毁金融家集团对于欧洲的统治。 法兰西第二帝国：金融帝国、基于法国小农的小块土地抵押发行国债刺激经济。而后经济危机，发动战争。战败，内债 + 战争赔款。 巴黎公社诞生，无产阶级专政的历史条件：各阶级轮番登台，最后的阶级：劳动者阶级在连统治阶级自己也不愿统治下去时方才登上历史舞台。 市民社会里的个人为何不能联合起来？互相之间不了解，因为大家讲不同的语言。 如何联合联系起来？借来的语言：前人和死人的语言、名字、口号、服装和旗帜， 两个目的： 表达自己现实的诉求（人支配和创造自己的语言）。内容战胜辞藻、实质战胜形式、活人战胜死人 掩盖自己现实的诉求（用语言支配人）。 “流氓无产者”与国债 # 流氓无产者：金融骗子，扮演者社会信用代理人的角色。 资产阶级（金融资本家）如何利用金融手段进行统治：收债、放债，用法国的钱再来收买法国。 具体地：用钞票、彩票、股票收买社会的各个阶级，收买军队（打手），这些收买人心的钞票又全部转化为国债，使得法国所有国民成为负债者。 不断进行改革（自身每次都能在投机的改革中获利），甚至用政变稳定金融秩序。 1848年：第二次工业革命、同时金融阶级代替工业阶级成为社会的统治者。 小块农地的金融化 # 工厂原型：监狱，监狱原型：济贫所。 资本主义的刑罚：用劳动和饥饿惩罚穷人。 资本主义的劳动交换：用劳动交换货币，货币由资本家掌握，即资本统治劳动。 空想的社会主义：排斥大生产、资本和金融，交换劳动法则：劳动者直接交换他们的劳动和劳动产品，不需要雇主，需要合作社。 共产主义 = 联合起来的劳动 + 联合起来的生产：肯定大生产、协作、科技、金融把生产资料组织为资本的功能，土地和资本不应被极少数资本家垄断，而应被联合起来的劳动所用。 农民离不开货币，经济的金融化离不开小农和小块土地，如果略过大规模的产业经济和实体经济的发展，只能把小块土地变成金融产品，必然破产 &amp;ndash; 路易-拿破仑·波拿巴的教训。 路易-拿破仑·波拿巴式发展道路模型的本质：金融家的冒险精神 + 小农幻想症。 “现代社会靠无产阶级过活” # 美国的“中产阶级”： 20世纪80年代，美国经济金融化、去工业化、去产业化，大量产业劳动者阶级转化为中产阶级，靠的是房产和股票的升值。 保守，唯一担心自己的财产不要减少，反对一切社会改革与政治运动。彼此不信任，无法形成政治力量，因此需要一个金融大资产阶级来代表他们。 金融危机，重新沦为无产阶级。 资本主义社会不是从罗马社会发展出来的，是从罗马“边缘的边缘”罗得岛上“跳起来的”。</description></item><item><title>C++内存管理</title><link>https://heming6666.github.io/docs/cs/basic/c++%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/basic/c++%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>C++内存管理 # 1、new/delete 和 malloc/free 有什么区别？ # new 的步骤分两步：调用 malloc 申请空间、调用构造函数。释放空间的时候一样。 new 不需要头文件， malloc 要 stdlib.h new 是类型安全的，比如 int *p = new float[2]就会报错；malloc 不是，编译时可以通过。 2、malloc和free的原理 # 2.1 进程的地址空间 # 3 - 4G 内核空间 0 - 3G 用户空间 栈（↓)：局部变量、函数参数、返回地址 内存映射段（↓）：动态库/匿名映射 堆（↑）： BSS段：未初始化/初始为0的.. 数据段：初始化的全局变量和局部静态变量 代码段：可执行二进制代码 2.2 进程控制块里的mm_struct # start_brk：堆的起始地址 brk：终止地址 可以增大brk的值，但需要系统调用 2.3 malloc 实现方案 # 系统调用开销 + 内存碎片 =&amp;gt; 采用内存池。</description></item><item><title>C++基础</title><link>https://heming6666.github.io/docs/cs/basic/c++%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/basic/c++%E5%9F%BA%E7%A1%80/</guid><description>C++ 基础 # 一、基本语法 # 1、指针和引用有什么区别？ # 指针有自己的空间，引用只是别名 sizeof(指针) = 4；sizeof(引用) = 对象的大小 指针可以指向其他对象，引用不行。 2、const 的作用是什么？ # 作用：（在 const 后面）的值不可改变。
变量； 指针，分为指向常量的指针（pointer to const）和自身是常量的指针（常量指针，const pointer）； 引用，指向常量的引用（reference to const），用于形参类型，即避免了拷贝，又避免了函数对值的修改； 成员函数，说明该成员函数内不能修改成员变量。 3、const 和 volatile 一起修饰变量？ # 表示变量是不可改变的，并且编译器不会优化这个变量。
4、static 的作用是什么？ # 普通变量：修改存储区域（静态区）、生命周期（main运行前分配空间），初始值 普通函数：作用范围。仅在定义该函数的文件内才能使用。多人开发场景，为了防止与他人命名空间里的函数重名，可以将函数定义为 static。 成员变量：不需要实例化对象就能访问。多个对象只一份 成员函数：同。但不能访问非静态成员 5、Lambda 表达式 # sort(vec.begin(), vec.end(), [](int a, int b) -&amp;gt; bool { return a &amp;lt; b })</description></item><item><title>HTTP/HTTPS</title><link>https://heming6666.github.io/docs/cs/basic/http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/basic/http/</guid><description>HTTP/HTTPS # 一、状态码 # 1、有哪些常见的状态码？ # 1xx - 正在处理 100 - 正常 101 - 切换请求协议 2- 成功 200 - 请求成功 201 - 已创建 202 - 已接受 204 - 无内容 3- 重定向 301 - 永久性重定向 302 - 临时重定向 4- 服务端无法处理请求（客户端错误 400 - Bad Request 语法错误 401 - Unauthorized 403 - Forbidden 拒绝 404 - not found 405 - method not allowd 406 - Not Acceptable 408 - Request Time-out 5- 服务端处理请求出错（服务端错误 500 - Internal Server Error 内部错误 501 - Not Implemented 502 - Bad Gateway 服务器无效响无效响应 503 - 服务器过载，稍后重试 504 - Gateway Timeout 请求超时，nginx 配置不对 2、301和302的区别是什么？ # 301是页面或资源永久性地移到了另一个位置。应用场景：网站移到了新的地址 / 或多个域名跳转到同一个域名，有利于URL权重的集中。 302是暂时性转移，常被用作网址劫持，搜索引擎会抓新的内容，但保存旧的网址。 二、HTTP 报文 # http请求报文</description></item><item><title>STL</title><link>https://heming6666.github.io/docs/cs/basic/stl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/basic/stl/</guid><description>STL # 零、STL总体 # 1、STL包含什么？ # 容器 迭代器：不暴露容器内部结构，对容器遍历。 算法：排序等常用算法。 2、常用的STL/容器？ # 顺序容器 array - 固定大小 vector - 动态数组 list - 双向链表 forward_list - 单向链表 deque - 双端队列 关联型 map、multimap、unordered_map、unordered_multimap set、multiset、unordered_set、unordered_multiset 容器适配器 stack - 栈 queue - 队列 priority_queue - 优先队列 3、容器内部怎么删除一个元素？ # 顺序型：it = erase(it) 返回下一个有效的it 关联型：erase(it++) 返回 void 一、vector # 1、底层原理是什么？ # 是一个动态数组，装不下的时候-&amp;gt;自动申请一片更大地空间，VS 下 1.</description></item><item><title>以公司担保为例</title><link>https://heming6666.github.io/docs/law/system/%E4%BB%A5%E5%85%AC%E5%8F%B8%E6%8B%85%E4%BF%9D%E4%B8%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/law/system/%E4%BB%A5%E5%85%AC%E5%8F%B8%E6%8B%85%E4%BF%9D%E4%B8%BA%E4%BE%8B/</guid><description>以公司担保为例 # 法律规范 # 2021公司法草案 # 【有限责任公司】 第七十一条 有限责任公司向其他企业投资或者为他人提供担保，按照公司章程的规定，由董事会或者股东会决议；公司章程对投资或者担保的总额及单项投资或者担保的数额有限额规定的，不得超过规定的限额。
公司为公司股东或者实际控制人提供担保的，必须经股东会决议。
前款规定的股东或者受前款规定的实际控制人支配的股东，不得参加前款规定事项的表决。该项表决由出席会议的其他股东所持表决权的过半数通过。
【股份有限公司】 第一百二十三条 本法第七十一条关于有限责任公司向其他企业投资、为他人提供担保的规定，第七十二条至第七十五条关于有限责任公司股东会决议无效、可撤销、不成立的规定，适用于股份有限公司。
【上市公司】 第一百三十九条 上市公司在一年内购买、出售重大资产或者向他人提供担保的金额超过公司资产总额百分之三十的，应当由股东会作出决议，并经出席会议的股东所持表决权的三分之二以上通过。
第一百七十四条 公司及其子公司不得为他人取得本公司的股份提供赠与、贷款、担保以及其他财务资助。公司实施员工持股计划或者金融机构开展正常经营业务的除外。
【决议】 第七十二条公司股东会、董事会的决议内容违反法律、行政法规的无效。
第七十三条股东会、董事会会议的召集程序、表决方式违反法律、行政法规或者公司章程，或者决议内容违反公司章程的，股东、董事、监事自决议作出之日起六十日内，未被通知参加股东会、董事会会议的股东、董事自知道或者应当知道股东会、董事会决议作出之日起六十日内，可以请求人民法院撤销；但是，股东会、董事会会议的召集程序或者表决方式仅有轻微瑕疵，对决议未产生实质影响的除外。股东、董事、监事依照前款规定提起诉讼，公司能够证明该股东、董事、监事有不正当目的的，人民法院可以应公司的请求，要求其提供相应担保。
第七十四条有下列情形之一的，股东会、董事会的决议不成立：（一）未召开股东会、董事会会议作出决议；（二）股东会、董事会会议未对决议事项进行表决；（三）出席会议的人数或者所持表决权数未达到本法或者公司章程规定的人数或者所持表决权数；（四）同意决议事项的人数或者所持表决权数未达到本法或者公司章程规定的人数或者所持表决权数。
第七十五条股东会、董事会决议被人民法院宣告无效、撤销或者确认不成立的，公司应当向公司登记机关申请撤销根据该决议已办理的变更登记。股东会、董事会决议被人民法院宣告无效、撤销或者确认不成立的，公司根据该决议与善意相对人形成的民事法律关系不受影响。
合同效力 # 民法典 # 第五百零四条 法人的法定代表人或者非法人组织的负责人超越权限订立的合同，除相对人知道或者应当知道其超越权限外，该代表行为有效，订立的合同对法人或者非法人组织发生效力。
第五百零五条 当事人超越经营范围订立的合同的效力，应当依照本法第一编第六章第三节和本编的有关规定确定，不得仅以超越经营范围确认合同无效。
18公司法 # 第十六条 公司向其他企业投资或者为他人提供担保，依照公司章程的规定，由董事会或者股东会、股东大会决议；公司章程对投资或者担保的总额及单项投资或者担保的数额有限额规定的，不得超过规定的限额。
公司为公司股东或者实际控制人提供担保的，必须经股东会或者股东大会决议。
前款规定的股东或者受前款规定的实际控制人支配的股东，不得参加前款规定事项的表决。该项表决由出席会议的其他股东所持表决权的过半数通过。
2019九民纪要 # （六）关于公司为他人提供担保 关于公司为他人提供担保的合同效力问题，审判实践中裁判尺度不统一，严重影响了司法公信力，有必要予以规范。对此，应当把握以下几点： 17.【违反《公司法》第16条构成越权代表】为防止法定代表人随意代表公司为他人提供担保给公司造成损失，损害中小股东利益，《公司法》第16条对法定代表人的代表权进行了限制。根据该条规定，担保行为不是法定代表人所能单独决定的事项，而必须以公司股东（大）会、董事会等公司机关的决议作为授权的基础和来源。法定代表人未经授权擅自为他人提供担保的，构成越权代表，人民法院应当根据《合同法》第50条关于法定代表人越权代表的规定，区分订立合同时债权人是否善意分别认定合同效力：债权人善意的，合同有效；反之，合同无效。 18.【善意的认定】前条所称的善意，是指债权人不知道或者不应当知道法定代表人超越权限订立担保合同。《公司法》第16条对关联担保和非关联担保的决议机关作出了区别规定，相应地，在善意的判断标准上也应当有所区别。一种情形是，为公司股东或者实际控制人提供关联担保，《公司法》第16条明确规定必须由股东（大）会决议，未经股东（大）会决议，构成越权代表。在此情况下，债权人主张担保合同有效，应当提供证据证明其在订立合同时对股东（大）会决议进行了审查，决议的表决程序符合《公司法》第16条的规定，即在排除被担保股东表决权的情况下，该项表决由出席会议的其他股东所持表决权的过半数通过，签字人员也符合公司章程的规定。另一种情形是，公司为公司股东或者实际控制人以外的人提供非关联担保，根据《公司法》第16条的规定，此时由公司章程规定是由董事会决议还是股东（大）会决议。无论章程是否对决议机关作出规定，也无论章程规定决议机关为董事会还是股东（大）会，根据《民法总则》第61条第3款关于“法人章程或者法人权力机构对法定代表人代表权的限制，不得对抗善意相对人”的规定，只要债权人能够证明其在订立担保合同时对董事会决议或者股东（大）会决议进行了审查，同意决议的人数及签字人员符合公司章程的规定，就应当认定其构成善意，但公司能够证明债权人明知公司章程对决议机关有明确规定的除外。债权人对公司机关决议内容的审查一般限于形式审查，只要求尽到必要的注意义务即可，标准不宜太过严苛。公司以机关决议系法定代表人伪造或者变造、决议程序违法、签章（名）不实、担保金额超过法定限额等事由抗辩债权人非善意的，人民法院一般不予支持。但是，公司有证据证明债权人明知决议系伪造或者变造的除外。 19.【无须机关决议的例外情况】存在下列情形的，即便债权人知道或者应当知道没有公司机关决议，也应当认定担保合同符合公司的真实意思表示，合同有效：（1）公司是以为他人提供担保为主营业务的担保公司，或者是开展保函业务的银行或者非银行金融机构；（2）公司为其直接或者间接控制的公司开展经营活动向债权人提供担保；（3）公司与主债务人之间存在相互担保等商业合作关系；（4）担保合同系由单独或者共同持有公司三分之二以上有表决权的股东签字同意。 20.【越权担保的民事责任】依据前述3条规定，担保合同有效，债权人请求公司承担担保责任的，人民法院依法予以支持；担保合同无效，债权人请求公司承担担保责任的，人民法院不予支持，但可以按照担保法及有关司法解释关于担保无效的规定处理。公司举证证明债权人明知法定代表人超越权限或者机关决议系伪造或者变造，债权人请求公司承担合同无效后的民事责任的，人民法院不予支持。 21.【权利救济】法定代表人的越权担保行为给公司造成损失，公司请求法定代表人承担赔偿责任的，人民法院依法予以支持。公司没有提起诉讼，股东依据《公司法》第151条的规定请求法定代表人承担赔偿责任的，人民法院依法予以支持。 22.【上市公司为他人提供担保】债权人根据上市公司公开披露的关于担保事项已经董事会或者股东大会决议通过的信息订立的担保合同，人民法院应当认定有效。 23.【债务加入准用担保规则】该约定的效力问题，参照本纪要关于公司为他人提供担保的有关规则处理。
2020最高人民法院关于适用《中华人民共和国民法典》有关担保制度的解释 # 第七条 公司的法定代表人违反公司法关于公司对外担保决议程序的规定，超越权限代表公司与相对人订立担保合同，人民法院应当依照民法典第六十一条和第五百零四条等规定处理：
（一）相对人善意的，担保合同对公司发生效力；相对人请求公司承担担保责任的，人民法院应予支持。
（二）相对人非善意的，担保合同对公司不发生效力；相对人请求公司承担赔偿责任的，参照适用本解释第十七条的有关规定。
法定代表人超越权限提供担保造成公司损失，公司请求法定代表人承担赔偿责任的，人民法院应予支持。
第一款 所称善意，是指相对人在订立担保合同时不知道且不应当知道法定代表人超越权限。相对人有证据证明已对公司决议进行了合理审查，人民法院应当认定其构成善意，但是公司有证据证明相对人知道或者应当知道决议系伪造、变造的除外。
第八条 有下列情形之一，公司以其未依照公司法关于公司对外担保的规定作出决议为由主张不承担担保责任的，人民法院不予支持：（一）金融机构开立保函或者担保公司提供担保；（二）公司为其全资子公司开展经营活动提供担保；（三）担保合同系由单独或者共同持有公司三分之二以上对担保事项有表决权的股东签字同意。上市公司对外提供担保，不适用前款第二项、第三项的规定。
第九条 相对人根据上市公司公开披露的关于担保事项已经董事会或者股东大会决议通过的信息，与上市公司订立担保合同，相对人主张担保合同对上市公司发生效力，并由上市公司承担担保责任的，人民法院应予支持。相对人未根据上市公司公开披露的关于担保事项已经董事会或者股东大会决议通过的信息，与上市公司订立担保合同，上市公司主张担保合同对其不发生效力，且不承担担保责任或者赔偿责任的，人民法院应予支持。相对人与上市公司已公开披露的控股子公司订立的担保合同，或者相对人与股票在国务院批准的其他全国性证券交易场所交易的公司订立的担保合同，适用前两款规定。</description></item><item><title>内存管理</title><link>https://heming6666.github.io/docs/cs/basic/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/basic/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>内存管理 # 一、虚拟内存思想 # 我们可以把进程所使用的地址「隔离」开来，即让操作系统为每个进程分配独立的一套虚拟地址，人人都有，大家自己玩自己的地址就行，互不干涉。虚拟地址最终怎么落到物理内存里，对进程来说是透明的，操作系统已经把这些都安排的明明白白了（MMU）。
二、内存分段 # 1、机制 # 虚拟地址和物理地址之间通过段表（段基地址+段大小）来映射。
分段机制会把程序的虚拟地址分成 4 个段：代码分段、数据分段、堆段、栈段。
2、不足 # 内存碎片问题（不连续的小物理内存，浪费） -&amp;gt; 并因此有内存交换的效率低的问题。
三、内存分页 # 1、分页机制 # 分页是把整个虚拟和物理内存空间切分成一页一页，固定尺寸，Linux下一页是4KB。
虚拟地址与物理地址之间通过页表来映射。
2、多级页表 # 页表一定要覆盖全部虚拟地址空间，不分级的页表就需要有 100 多万个页表项来映射，而二级分页则只需要 1024 个页表项。（此时一级页表覆盖到了全部虚拟地址空间，二级页表在需要时创建）。
3、缺页异常 # 而当进程访问的虚拟地址在页表中查不到时，系统会产生一个缺页异常，进入系统内核空间分配物理内存、更新进程页表，最后再返回用户空间，恢复进程的运行。
最近最久未使用 LRU 先进先出 第二次机会算法 4、快表 # 局部性原理。
根据逻辑地址，得到页号+页内偏移，去快表里面，看是否命中。 如果命中，取出对应的内存块号，和页内偏移拼接得到物理地址。即：只需一次访存。 如果没命中，访问内存中的页表，找到对应表项，最后得到物理地址，访问内存。即：两次访存。同时，还要存入快表，如果满了，就进行替换。 5、好处和优点 # 解决了内存碎片问题 交换效率也更高 不需要一次性全部加载到物理内存 四、段页式内存管理 # 先将程序划分为多个有逻辑意义的段，也就是前面提到的分段机制；</description></item><item><title>死锁</title><link>https://heming6666.github.io/docs/cs/basic/%E6%AD%BB%E9%94%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/basic/%E6%AD%BB%E9%94%81/</guid><description>死锁 # 1、死锁怎么产生的？ # 两个或者多个进程相互等待对方资源，导致死锁。比如：
系统资源不足 资源分配不合理 进程运行推进顺序不合理 2、必要条件 ？&amp;mdash;&amp;gt; 预防方法？ # 一般来说，发生死锁有四个必要条件：
互斥：资源要么已经分配给了一个进程，要么就是可用的。&amp;ndash; A唯一拥有B 占有和等待：已经得到了某个资源的进程可以再请求新的资源。&amp;ndash; 开始前就把所有需要的资源都申请好 不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。 环路等待：有两个或多个进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。 &amp;ndash; 给资源统一编号 3、处理方法 # 鸵鸟策略：因为代价太高了，所以如果影响不大或概率低 死锁预防：运行之前破坏4个条件 死锁检测与死锁恢复：有向图是否存在环、抢占、回滚、杀死进程 死锁避免：运行时 安全状态：就算所有进程突然请求对资源的最大需求，也存在 单个资源的银行家算法：如果满足请求，状态是否安全，拒绝进入不安全状态 多个资源的银行家算法：拒绝进入不安全状态 检测一个状态是否安全： 还需要分配的矩阵是否存在一行小于等于向量A?没有的话就是不安全的 找到一行，就标记终止，并计入已分配资源 知道所有进程都被标记终止，则状态安全。</description></item><item><title>计算机网络</title><link>https://heming6666.github.io/docs/cs/basic/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/basic/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid><description>计算机网络 # 一、网络体系结构 # 分层原因：独立（更容易实现和维护）、标准化的制定 表示层的作用：数据转化，比如加解密、压缩和解压缩。如视频 会话层的作用：会话控制 二、传输层 TCP、UDP # 1-1、三次握手 # 服务端首先处于LISTEN状态，等待客户端的连接请求。 A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x，发送完毕后，客户端就进入SYN_SENT状态 B 收到连接请求报文，进行第二次握手，向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。然后服务端进入SYN-RCVD. A 收到以后，进行第三次握手，向 B 发出确认报文，ACK=1，确认号为 y+1，序号为 x+1。然后进入ESTABLISHED状态，当服务器端收到以后，也进入ESTABLISHED状态。 1-2、为什么是三次握手，不是两次？ # 为了防止已失效的连接请求报文段突然又传送到了服务端，从而产生错误。
第一次握手请求，滞留，连接释放以后的某个时间到达。 服务端以为是新的连接请求，发确认报文，同意建立连接。 假设不采用“三次握手”，只要服务端确认了，新的连接就建立了。 但事实上客户端并没有，因此不会管服务端。但服务端一直等待数据，资源白白浪费。 从另外一个角度看，这个问题的本质是信道是不可靠的，但是通信的双方为了保证传输是可靠的，三次通信是理论上的最小值。例如TCP的可靠连接核心就是靠seq序列号来完成的。A会向B同步自己的初始序列号，B也会反过来向A同步自己的初始序列号，并且TCP规定，必须经过确认，也就是&amp;hellip;
1-3、如果第三次握手报文丢了，会怎么样？ # 如果第三次握手报文丢了，A发完后就进入Established状态，但B还是SYN-RCVD：
如果双方都没有数据要发送，则B会周期性超时重传； 如果A有数据要发给B，会发送 Data + ACK, B就会进入Established状态，并接受数据； 如果B有数据要发给A，发不了。同1. 2-1、四次挥手 # 第一次挥手。客户端向服务器端发送一个FIN报文，通知服务器，我已经没有数据要发送了，进入FIN_WAIT_1状态。 第二次挥手。服务端返回一个ACK报文，告诉客户端，我知道你已经没有东西要发送了，但我还要再确认一下我是不是还有东西要给你。然后服务器端进入CLOSE_WAIT状态。客户端接收到确认包之后进入FIN_WAIT_2状态。此时TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。 第三次挥手。服务器判断自己也没有数据需要发送给客户端，就向客户端发送ACK和FIN消息，告诉客户端，好了，我也没有东西要给你了，你可以关掉这个连接了。然后服务器端就进入了LAST_ACK状态。 最后是第四次挥手。客户端发送确认报文。发送完以后，进入TIME_WAIT状态，等待 2 MSL以后，关闭连接，进入CLOSED状态。服务器端接收到确认包以后，也关闭连接，进入CLOSED状态。 2-2、为什么要四次挥手？ # 是为了确保客户端和服务端双方都能通知对方释放连接。</description></item><item><title>设计模式</title><link>https://heming6666.github.io/docs/cs/basic/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heming6666.github.io/docs/cs/basic/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>设计模式 # 零、反射 # 含义 # 在程序运行时，动态获取对象信息以及调用对象方法的能力。
要解决的问题 # 在程序运行时，通过类的名称字符串来生成类的对象。
一、简单工厂模式 # 含义 # 把实例化的操作单独放到一个类中，即：工厂负责生产对象。
要解决的问题 # 让使用者不需要知道内部细节，就能创建对象，实现解耦。
组成 # 抽象的Product，描述接口。 具体Product, 创建的目标类。 工厂类，被外界调用，根据传入不同参数从而创建不同类的实例。 实际代码 # 工厂类有个静态方法，可以用switch case控制返回哪个类的实例。外界只要调用并传入参数即可。
改进：通过反射机制，去掉switch case，添加新Product不用修改。
应用场景 # 当外界/客户端只关心传入参数，不关心内部逻辑时，解耦 缺点 # 处于中心位置，需要知道所有创建细节，职责过于繁重； 要加新的产品时，要修改工厂类。 二、工厂方法模式 # 含义 # 定义一个用于创建对象的接口，由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类。
要解决的问题 # 让使用者不需要知道内部细节，就能创建对象，实现解耦。 新加产品时，只要添加具体产品和具体工厂就可以。 组成 # 抽象的Product：描述接口。 具体Product：具体产品。 抽象工厂类 具体工厂类 实际代码 # 客户端怎么调用？</description></item></channel></rss>